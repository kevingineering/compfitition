{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm08';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm08 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function algorithm08(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var k, k0, k1, i; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values in a\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // mark workspace\n\n        w[i] = mark; // set value\n\n        x[i] = avalues[k]; // add index\n\n        cindex.push(i);\n      } // loop values in b\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check value exists in workspace\n\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      } // initialize first index in j\n\n\n      k = cptr[j]; // loop index in j\n\n      while (k < cindex.length) {\n        // row\n        i = cindex[k]; // value @ i\n\n        var v = x[i]; // check for zero value\n\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v); // increment pointer\n\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/mathjs/es/type/matrix/utils/algorithm08.js"],"names":["factory","DimensionError","name","dependencies","createAlgorithm08","_ref","typed","equalScalar","algorithm08","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","Error","rows","columns","dt","eq","zero","cf","find","convert","cvalues","cindex","cptr","c","createSparseMatrix","values","index","ptr","size","datatype","x","w","k","k0","k1","i","j","mark","push","v","splice"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm08';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm08 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm08(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var k, k0, k1, i; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values in a\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // mark workspace\n\n        w[i] = mark; // set value\n\n        x[i] = avalues[k]; // add index\n\n        cindex.push(i);\n      } // loop values in b\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check value exists in workspace\n\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      } // initialize first index in j\n\n\n      k = cptr[j]; // loop index in j\n\n      while (k < cindex.length) {\n        // row\n        i = cindex[k]; // value @ i\n\n        var v = x[i]; // check for zero value\n\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v); // increment pointer\n\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});"]},"metadata":{},"sourceType":"module"}