{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/page/GoalInfo.js\";\nimport React from 'react';\nimport { round } from 'mathjs';\nimport moment from 'moment';\n\nconst GoalInfo = ({\n  goal,\n  time,\n  record,\n  value\n}) => {\n  const duration = goal.duration,\n        startDate = goal.startDate,\n        units = goal.units,\n        total = goal.total,\n        type = goal.type;\n  let topLeft = `Start Date: ${moment.utc(startDate).format('MMMM Do, YYYY')}`;\n  let topRight = null;\n  let middleLeft = null;\n  let middleRight = null;\n  let bottomLeft = null;\n  let bottomRight = null;\n\n  if (isStarted) {\n    //difference\n    if (type === 'difference') {\n      topRight = time === duration ? `Duration: ${duration} days` : `Day: ${time + 1} / ${duration}`;\n      middleLeft = `Start: ${record[0]} ${units}`;\n      middleRight = `Goal: ${total} ${units}`;\n      bottomLeft = time === duration ? `Final: ${record[0] + value} ${units}` : `Current: ${record[0] + value} ${units}`;\n      bottomRight = `Change: ${value > 0 ? '+' : ''}${value} ${units}`;\n    } //total\n    else if (type === 'total') {\n        topRight = time === duration ? `Duration: ${duration} days` : `Day: ${time + 1} / ${duration}`;\n        middleLeft = `Total: ${value} / ${total} ${units}`;\n        middleRight = `Goal Completion: ${round(value / total * 100)}%`;\n      } //pass/fail - TODO _ FIX MIDDLELEFT\n      else if (type === 'pass/fail') {\n          topRight = null;\n          middleLeft = `Success To Date: ${value} / ${time > duration ? record.length : time + 1} (${round(value / (time + 1) * 100)}%)`;\n          bottomLeft = `Success Total: ${value} / ${record.length} (${round(value / record.length * 100)}%)`;\n        }\n  }\n\n  if (!isStarted) {\n    topLeft = `Begins ${moment.utc(startDate).format('MMMM Do, YYYY')}`;\n    topRight = `Duration: ${duration} days`;\n\n    if (type === 'difference') {\n      middleLeft = `Start: ${record[0]} ${units}`;\n      middleRight = `Goal: ${total} ${units}`;\n    } else if (type === 'total') {\n      middleLeft = `Goal: ${total} ${units}`;\n    }\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, topLeft), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, topRight))), type === 'pass/fail' && (time === duration || !isStarted) ? null : React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, middleLeft), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, middleRight))), type !== 'total' && isStarted && React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, bottomLeft), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, bottomRight))));\n};\n\nexport default GoalInfo;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/page/GoalInfo.js"],"names":["React","round","moment","GoalInfo","goal","time","record","value","duration","startDate","units","total","type","topLeft","utc","format","topRight","middleLeft","middleRight","bottomLeft","bottomRight","isStarted","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA;AAArB,CAAD,KAAiC;AAAA,QAExCC,QAFwC,GAEIJ,IAFJ,CAExCI,QAFwC;AAAA,QAE9BC,SAF8B,GAEIL,IAFJ,CAE9BK,SAF8B;AAAA,QAEnBC,KAFmB,GAEIN,IAFJ,CAEnBM,KAFmB;AAAA,QAEZC,KAFY,GAEIP,IAFJ,CAEZO,KAFY;AAAA,QAELC,IAFK,GAEIR,IAFJ,CAELQ,IAFK;AAIhD,MAAIC,OAAO,GAAI,eAAcX,MAAM,CAACY,GAAP,CAAWL,SAAX,EAAsBM,MAAtB,CAA6B,eAA7B,CAA8C,EAA3E;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,MAAIC,SAAJ,EAAe;AACX;AACA,QAAIT,IAAI,KAAK,YAAb,EAA2B;AACzBI,MAAAA,QAAQ,GAAIX,IAAI,KAAKG,QAAV,GACV,aAAYA,QAAS,OADX,GAEV,QAAOH,IAAI,GAAG,CAAE,MAAKG,QAAS,EAF/B;AAGFS,MAAAA,UAAU,GAAI,UAASX,MAAM,CAAC,CAAD,CAAI,IAAGI,KAAM,EAA1C;AACAQ,MAAAA,WAAW,GAAI,SAAQP,KAAM,IAAGD,KAAM,EAAtC;AACAS,MAAAA,UAAU,GAAId,IAAI,KAAKG,QAAV,GACV,UAASF,MAAM,CAAC,CAAD,CAAN,GAAYC,KAAM,IAAGG,KAAM,EAD1B,GAEV,YAAWJ,MAAM,CAAC,CAAD,CAAN,GAAYC,KAAM,IAAGG,KAAM,EAFzC;AAGAU,MAAAA,WAAW,GAAI,WAAUb,KAAK,GAAG,CAAR,GAAY,GAAZ,GAAkB,EAAG,GAAEA,KAAM,IAAGG,KAAM,EAA/D;AACD,KAVC,CAWF;AAXE,SAYG,IAAIE,IAAI,KAAK,OAAb,EAAsB;AACzBI,QAAAA,QAAQ,GAAIX,IAAI,KAAKG,QAAV,GACR,aAAYA,QAAS,OADb,GAER,QAAOH,IAAI,GAAG,CAAE,MAAKG,QAAS,EAFjC;AAGES,QAAAA,UAAU,GAAI,UAASV,KAAM,MAAKI,KAAM,IAAGD,KAAM,EAAjD;AACFQ,QAAAA,WAAW,GAAI,oBAAmBjB,KAAK,CAACM,KAAK,GAAGI,KAAR,GAAgB,GAAjB,CAAsB,GAA7D;AACD,OANI,CAOL;AAPK,WAQA,IAAIC,IAAI,KAAK,WAAb,EAA0B;AAC7BI,UAAAA,QAAQ,GAAG,IAAX;AACAC,UAAAA,UAAU,GAAI,oBAAmBV,KAAM,MAAKF,IAAI,GAAGG,QAAP,GAAkBF,MAAM,CAACgB,MAAzB,GAAkCjB,IAAI,GAAG,CAAE,KAAIJ,KAAK,CAACM,KAAK,IAAIF,IAAI,GAAG,CAAX,CAAL,GAAqB,GAAtB,CAA2B,IAA3H;AACAc,UAAAA,UAAU,GAAI,kBAAiBZ,KAAM,MAAKD,MAAM,CAACgB,MAAO,KAAIrB,KAAK,CAACM,KAAK,GAAGD,MAAM,CAACgB,MAAf,GAAwB,GAAzB,CAA8B,IAA/F;AACD;AACF;;AAED,MAAI,CAACD,SAAL,EAAgB;AACdR,IAAAA,OAAO,GAAI,UAASX,MAAM,CAACY,GAAP,CAAWL,SAAX,EAAsBM,MAAtB,CAA6B,eAA7B,CAA8C,EAAlE;AACAC,IAAAA,QAAQ,GAAI,aAAYR,QAAS,OAAjC;;AACA,QAAII,IAAI,KAAK,YAAb,EAA2B;AACzBK,MAAAA,UAAU,GAAI,UAASX,MAAM,CAAC,CAAD,CAAI,IAAGI,KAAM,EAA1C;AACAQ,MAAAA,WAAW,GAAI,SAAQP,KAAM,IAAGD,KAAM,EAAtC;AACD,KAHD,MAIK,IAAIE,IAAI,KAAK,OAAb,EAAsB;AACzBK,MAAAA,UAAU,GAAI,SAAQN,KAAM,IAAGD,KAAM,EAArC;AACD;AACF;;AAED,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,OADH,CADF,EAIE;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,QADH,CAJF,CADF,CADF,EAWGJ,IAAI,KAAK,WAAT,KAAyBP,IAAI,KAAKG,QAAT,IAAqB,CAACa,SAA/C,IAA4D,IAA5D,GACC;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,UADH,CADF,EAIE;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,WADH,CAJF,CADF,CAZJ,EAuBGN,IAAI,KAAK,OAAT,IAAoBS,SAApB,IACC;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,UADH,CADF,EAIE;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,WADH,CAJF,CADF,CAxBJ,CADF;AAsCD,CA1FD;;AA4FA,eAAejB,QAAf","sourcesContent":["import React from 'react';\nimport { round } from 'mathjs';\nimport moment from 'moment';\n\n\nconst GoalInfo = ({goal, time, record, value}) => {\n\n  const { duration, startDate, units, total, type } = goal;\n\n  let topLeft = `Start Date: ${moment.utc(startDate).format('MMMM Do, YYYY')}`\n  let topRight = null;\n  let middleLeft = null;\n  let middleRight = null;\n  let bottomLeft = null;\n  let bottomRight = null;\n\n  if (isStarted) {\n      //difference\n      if (type === 'difference') {\n        topRight = (time === duration) ? \n        `Duration: ${duration} days` :\n        `Day: ${time + 1} / ${duration}`;\n      middleLeft = `Start: ${record[0]} ${units}`;\n      middleRight = `Goal: ${total} ${units}`;\n      bottomLeft = (time === duration) ? \n        `Final: ${record[0] + value} ${units}` :\n        `Current: ${record[0] + value} ${units}`;\n      bottomRight = `Change: ${value > 0 ? '+' : ''}${value} ${units}`\n    }\n    //total\n    else if (type === 'total') {\n      topRight = (time === duration) ? \n        `Duration: ${duration} days` : \n        `Day: ${time + 1} / ${duration}`\n        middleLeft = `Total: ${value} / ${total} ${units}`;\n      middleRight = `Goal Completion: ${round(value / total * 100)}%`;\n    }\n    //pass/fail - TODO _ FIX MIDDLELEFT\n    else if (type === 'pass/fail') {\n      topRight = null;\n      middleLeft = `Success To Date: ${value} / ${time > duration ? record.length : time + 1} (${round(value / (time + 1) * 100)}%)`\n      bottomLeft = `Success Total: ${value} / ${record.length} (${round(value / record.length * 100)}%)`\n    }\n  }\n\n  if (!isStarted) {\n    topLeft = `Begins ${moment.utc(startDate).format('MMMM Do, YYYY')}`\n    topRight = `Duration: ${duration} days`\n    if (type === 'difference') {\n      middleLeft = `Start: ${record[0]} ${units}`;\n      middleRight = `Goal: ${total} ${units}`;\n    }\n    else if (type === 'total') {\n      middleLeft = `Goal: ${total} ${units}`;\n    }\n  }\n  \n  return (\n    <React.Fragment>\n      <li className='table-info lr-border'>\n        <div className='space-between'>\n          <span>\n            {topLeft}\n          </span>\n          <span className='right'>\n            {topRight}\n          </span>\n        </div>\n      </li>\n      {type === 'pass/fail' && (time === duration || !isStarted) ? null :\n        <li className='table-info lr-border'>\n          <div className='space-between'>\n            <span>\n              {middleLeft}\n            </span>\n            <span className='right'>\n              {middleRight}\n            </span>\n          </div>\n        </li>\n      }\n      {type !== 'total' && isStarted &&\n        <li className='table-info lr-border'>\n          <div className='space-between'>\n            <span>\n              {bottomLeft}\n            </span>\n            <span className='right'>\n              {bottomRight}\n            </span>\n          </div>\n        </li>\n      }\n    </React.Fragment>\n  )\n}\n\nexport default GoalInfo;"]},"metadata":{},"sourceType":"module"}