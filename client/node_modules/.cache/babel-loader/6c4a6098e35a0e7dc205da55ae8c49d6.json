{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/contexts/competitions/competitionState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport CompetitionContext from './competitionContext';\nimport CompetitionReducer from './competitionReducer';\nimport { GET_COMPETITION, GET_COMPETITION_GOALS, GET_COMPETITION_PARTICIPANTS, ADD_COMPETITION, DELETE_COMPETITION, UPDATE_COMPETITION, ADD_USER_TO_COMPETITION, REMOVE_USER_FROM_COMPETITION, KICK_USER_FROM_COMPETITION, ADD_ADMIN_TO_COMPETITION, REMOVE_ADMIN_FROM_COMPETITION, SET_COMPETITION_LOADING, CLEAR_COMPETITION, COMPETITION_ERROR } from '../types';\n\nconst CompetitionState = props => {\n  const initialState = {\n    competition: {},\n    competitionGoals: [],\n    competitionParticipants: [],\n    competitionError: null,\n    competitionLoading: true\n  };\n\n  const _useReducer = useReducer(CompetitionReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //set headers for addGoal, updateGoal, and updateGoalTracker\n\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //get competition\n\n  const getCompetition = async _id => {\n    //console.log(''getCompetition')\n    try {\n      setLoading();\n      const res = await axios.get(`/api/competitions/${_id}`);\n      dispatch({\n        type: GET_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; //get competition goals for all participants\n\n\n  const getCompetitionGoals = async _id => {\n    //console.log(''getCompetitionGoals')\n    try {\n      setLoading();\n      const res = await axios.get(`/api/competitions/goals/${_id}`);\n      dispatch({\n        type: GET_COMPETITION_GOALS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const getCompetitionParticipants = async _id => {\n    //console.log(''getCompetitionParticipants')\n    try {\n      setLoading();\n      const res = await axios.get(`/api/competitions/participants/${_id}`);\n      dispatch({\n        type: GET_COMPETITION_PARTICIPANTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; //add competition\n\n\n  const addCompetition = async (_id, isMax) => {\n    try {\n      //console.log(''addCompetition')\n      setLoading();\n      const res = await axios.post(`/api/competitions/${_id}`, {\n        isMax\n      }, config);\n      dispatch({\n        type: ADD_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; //delete competition\n\n\n  const deleteCompetition = async _id => {\n    //console.log(''deleteCompetition')\n    try {\n      setLoading();\n      await axios.delete(`/api/competitions/${_id}`);\n      dispatch({\n        type: DELETE_COMPETITION\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; //update competition\n\n\n  const updateCompetition = async comp => {\n    //console.log(''updateCompetition')\n    try {\n      setLoading();\n      const res = await axios.put(`/api/competitions/${comp._id}`, comp, config);\n      dispatch({\n        type: UPDATE_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const addUserToCompetition = async _id => {\n    //console.log(''addUserToCompetition')\n    try {\n      setLoading();\n      const res = await axios.put(`/api/competitions/adduser/${_id}`);\n      dispatch({\n        type: ADD_USER_TO_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const removeUserFromCompetition = async _id => {\n    //console.log(''removeUserFromCompetition')\n    try {\n      setLoading();\n      await axios.put(`/api/competitions/removeuser/${_id}`);\n      dispatch({\n        type: REMOVE_USER_FROM_COMPETITION\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const kickUserFromCompetition = async (_id, kickeeId) => {\n    //console.log(''kickFromCompetition')\n    try {\n      setLoading();\n      const res = await axios.put(`/api/competitions/kickuser/${_id}`, {\n        kickeeId\n      }, config);\n      dispatch({\n        type: KICK_USER_FROM_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const addAdminToCompetition = async (_id, newAdminId) => {\n    //console.log(''addAdminToCompetition')\n    try {\n      setLoading();\n      const res = await axios.put(`/api/competitions/addadmin/${_id}`, newAdminId, config);\n      dispatch({\n        type: ADD_ADMIN_TO_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const removeAdminFromCompetition = async _id => {\n    //console.log(''removeAdminFromCompetition')\n    try {\n      setLoading();\n      const res = await axios.put(`/api/competitions/removeadmin/${_id}`);\n      dispatch({\n        type: REMOVE_ADMIN_FROM_COMPETITION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: COMPETITION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  }; //set loading\n\n\n  const setLoading = () => {\n    //console.log(''setLoading')\n    return {\n      type: SET_COMPETITION_LOADING\n    };\n  }; //clear requests\n\n\n  const clearCompetition = () => {\n    //console.log(''clearCompetition')\n    dispatch({\n      type: CLEAR_COMPETITION\n    });\n  };\n\n  return React.createElement(CompetitionContext.Provider, {\n    value: {\n      competition: state.competition,\n      competitionGoals: state.competitionGoals,\n      competitionParticipants: state.competitionParticipants,\n      competitionError: state.competitionError,\n      competitionLoading: state.competitionLoading,\n      getCompetition,\n      getCompetitionGoals,\n      getCompetitionParticipants,\n      addCompetition,\n      deleteCompetition,\n      updateCompetition,\n      addUserToCompetition,\n      removeUserFromCompetition,\n      kickUserFromCompetition,\n      addAdminToCompetition,\n      removeAdminFromCompetition,\n      clearCompetition\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default CompetitionState;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/contexts/competitions/competitionState.js"],"names":["React","useReducer","axios","CompetitionContext","CompetitionReducer","GET_COMPETITION","GET_COMPETITION_GOALS","GET_COMPETITION_PARTICIPANTS","ADD_COMPETITION","DELETE_COMPETITION","UPDATE_COMPETITION","ADD_USER_TO_COMPETITION","REMOVE_USER_FROM_COMPETITION","KICK_USER_FROM_COMPETITION","ADD_ADMIN_TO_COMPETITION","REMOVE_ADMIN_FROM_COMPETITION","SET_COMPETITION_LOADING","CLEAR_COMPETITION","COMPETITION_ERROR","CompetitionState","props","initialState","competition","competitionGoals","competitionParticipants","competitionError","competitionLoading","state","dispatch","config","headers","getCompetition","_id","setLoading","res","get","type","payload","data","err","response","msg","getCompetitionGoals","getCompetitionParticipants","addCompetition","isMax","post","deleteCompetition","delete","updateCompetition","comp","put","addUserToCompetition","removeUserFromCompetition","kickUserFromCompetition","kickeeId","addAdminToCompetition","newAdminId","removeAdminFromCompetition","clearCompetition","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport CompetitionContext from './competitionContext';\nimport CompetitionReducer from './competitionReducer';\nimport {\n  GET_COMPETITION,\n  GET_COMPETITION_GOALS,\n  GET_COMPETITION_PARTICIPANTS,\n  ADD_COMPETITION,\n  DELETE_COMPETITION,\n  UPDATE_COMPETITION,\n  ADD_USER_TO_COMPETITION,\n  REMOVE_USER_FROM_COMPETITION,\n  KICK_USER_FROM_COMPETITION,\n  ADD_ADMIN_TO_COMPETITION,\n  REMOVE_ADMIN_FROM_COMPETITION,\n  SET_COMPETITION_LOADING,\n  CLEAR_COMPETITION,\n  COMPETITION_ERROR\n} from '../types';\n\nconst CompetitionState = props => {\n  const initialState = {\n    competition: {},\n    competitionGoals: [],\n    competitionParticipants: [],\n    competitionError: null,\n    competitionLoading: true\n  };\n\n  const [state, dispatch] = useReducer(CompetitionReducer, initialState);\n\n  //set headers for addGoal, updateGoal, and updateGoalTracker\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  //get competition\n  const getCompetition = async (_id) => {\n    //console.log(''getCompetition')\n    try {\n      setLoading();\n      const res = await axios.get(`/api/competitions/${_id}`);\n      dispatch({ type: GET_COMPETITION, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  //get competition goals for all participants\n  const getCompetitionGoals = async (_id) => {\n    //console.log(''getCompetitionGoals')\n    try {\n      setLoading();\n      const res = await axios.get(`/api/competitions/goals/${_id}`);\n      dispatch({ type: GET_COMPETITION_GOALS, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  const getCompetitionParticipants = async (_id) => {\n    //console.log(''getCompetitionParticipants')\n    try {\n      setLoading();\n      const res = await axios.get(`/api/competitions/participants/${_id}`);\n      dispatch({ type: GET_COMPETITION_PARTICIPANTS, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  }\n\n  //add competition\n  const addCompetition = async (_id, isMax) => {\n    try {\n      //console.log(''addCompetition')\n      setLoading();\n      const res = await axios.post(`/api/competitions/${_id}`, {isMax}, config);\n      dispatch({ type: ADD_COMPETITION, payload: res.data});\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  //delete competition\n  const deleteCompetition = async (_id) => {\n    //console.log(''deleteCompetition')\n    try {\n      setLoading();\n      await axios.delete(`/api/competitions/${_id}`);\n      dispatch({ type: DELETE_COMPETITION });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  //update competition\n  const updateCompetition = async (comp) => {\n    //console.log(''updateCompetition')\n    try{\n      setLoading();\n      const res = await axios.put(`/api/competitions/${comp._id}`, comp, config);\n      dispatch({ type: UPDATE_COMPETITION, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  const addUserToCompetition = async (_id) => {\n    //console.log(''addUserToCompetition')\n    try{\n      setLoading();\n      const res = await axios.put(`/api/competitions/adduser/${_id}`);\n      dispatch({ type: ADD_USER_TO_COMPETITION, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  const removeUserFromCompetition = async (_id) => {\n    //console.log(''removeUserFromCompetition')\n    try{\n      setLoading();\n      await axios.put(`/api/competitions/removeuser/${_id}`);\n      dispatch({ type: REMOVE_USER_FROM_COMPETITION });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  const kickUserFromCompetition = async (_id, kickeeId) => {\n    //console.log(''kickFromCompetition')\n    try{\n      setLoading();\n      const res = await axios.put(`/api/competitions/kickuser/${_id}`, {kickeeId}, config);\n      dispatch({ type: KICK_USER_FROM_COMPETITION, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  const addAdminToCompetition = async (_id, newAdminId) => {\n    //console.log(''addAdminToCompetition')\n    try{\n      setLoading();\n      const res = await axios.put(`/api/competitions/addadmin/${_id}`, newAdminId, config);\n      dispatch({ type: ADD_ADMIN_TO_COMPETITION, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  const removeAdminFromCompetition = async (_id) => {\n    //console.log(''removeAdminFromCompetition')\n    try{\n      setLoading();\n      const res = await axios.put(`/api/competitions/removeadmin/${_id}`);\n      dispatch({ type: REMOVE_ADMIN_FROM_COMPETITION, payload: res.data });\n    } catch (err) {\n      dispatch({ type: COMPETITION_ERROR, payload: err.response.data.msg });\n    }\n  };\n\n  //set loading\n  const setLoading = () => {\n    //console.log(''setLoading')\n    return { type: SET_COMPETITION_LOADING }\n  };\n\n  //clear requests\n  const clearCompetition = () => {\n    //console.log(''clearCompetition')\n    dispatch({ type: CLEAR_COMPETITION });\n  };\n\n  return (\n    <CompetitionContext.Provider\n    value={{\n      competition: state.competition,\n      competitionGoals: state.competitionGoals,\n      competitionParticipants: state.competitionParticipants,\n      competitionError: state.competitionError,\n      competitionLoading: state.competitionLoading,\n      getCompetition,\n      getCompetitionGoals,\n      getCompetitionParticipants,\n      addCompetition,\n      deleteCompetition,\n      updateCompetition,\n      addUserToCompetition,\n      removeUserFromCompetition,\n      kickUserFromCompetition,\n      addAdminToCompetition,\n      removeAdminFromCompetition,\n      clearCompetition\n    }}>\n      {props.children}\n    </CompetitionContext.Provider>\n  )\n};\n\nexport default CompetitionState;"]},"metadata":{},"sourceType":"module"}