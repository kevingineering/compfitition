{"ast":null,"code":"import { factory } from '../../../utils/factory';\nvar name = 'algorithm11';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm11 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  return function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/mathjs/es/type/matrix/utils/algorithm11.js"],"names":["factory","name","dependencies","createAlgorithm11","_ref","typed","equalScalar","algorithm11","s","b","callback","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","rows","columns","dt","eq","zero","cf","find","convert","cvalues","cindex","cptr","c","createSparseMatrix","values","index","ptr","size","datatype","j","length","k0","k1","k","i","v","push"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,aAAV,CAAnB;AACA,OAAO,IAAIC,iBAAiB;AAC5B;AACAH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC1C,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,WAAW,GAAGF,IAAI,CAACE,WADvB;AAGA;;;;;;;;;;;;;;;;;;;;AAmBA,SAAO,SAASC,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8C;AACnD;AACA,QAAIC,OAAO,GAAGJ,CAAC,CAACK,OAAhB;AACA,QAAIC,MAAM,GAAGN,CAAC,CAACO,MAAf;AACA,QAAIC,IAAI,GAAGR,CAAC,CAACS,IAAb;AACA,QAAIC,KAAK,GAAGV,CAAC,CAACW,KAAd;AACA,QAAIC,GAAG,GAAGZ,CAAC,CAACa,SAAZ,CANmD,CAM5B;;AAEvB,QAAI,CAACT,OAAL,EAAc;AACZ,YAAM,IAAIU,KAAJ,CAAU,oEAAV,CAAN;AACD,KAVkD,CAUjD;;;AAGF,QAAIC,IAAI,GAAGL,KAAK,CAAC,CAAD,CAAhB;AACA,QAAIM,OAAO,GAAGN,KAAK,CAAC,CAAD,CAAnB,CAdmD,CAc3B;;AAExB,QAAIO,EAAJ,CAhBmD,CAgB3C;;AAER,QAAIC,EAAE,GAAGpB,WAAT,CAlBmD,CAkB7B;;AAEtB,QAAIqB,IAAI,GAAG,CAAX,CApBmD,CAoBrC;;AAEd,QAAIC,EAAE,GAAGlB,QAAT,CAtBmD,CAsBhC;;AAEnB,QAAI,OAAOU,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACAK,MAAAA,EAAE,GAAGL,GAAL,CAF2B,CAEjB;;AAEVM,MAAAA,EAAE,GAAGrB,KAAK,CAACwB,IAAN,CAAWvB,WAAX,EAAwB,CAACmB,EAAD,EAAKA,EAAL,CAAxB,CAAL,CAJ2B,CAIa;;AAExCE,MAAAA,IAAI,GAAGtB,KAAK,CAACyB,OAAN,CAAc,CAAd,EAAiBL,EAAjB,CAAP,CAN2B,CAME;;AAE7BhB,MAAAA,CAAC,GAAGJ,KAAK,CAACyB,OAAN,CAAcrB,CAAd,EAAiBgB,EAAjB,CAAJ,CAR2B,CAQD;;AAE1BG,MAAAA,EAAE,GAAGvB,KAAK,CAACwB,IAAN,CAAWnB,QAAX,EAAqB,CAACe,EAAD,EAAKA,EAAL,CAArB,CAAL;AACD,KAnCkD,CAmCjD;;;AAGF,QAAIM,OAAO,GAAG,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,IAAI,GAAG,EAAX,CAxCmD,CAwCpC;;AAEf,QAAIC,CAAC,GAAG1B,CAAC,CAAC2B,kBAAF,CAAqB;AAC3BC,MAAAA,MAAM,EAAEL,OADmB;AAE3BM,MAAAA,KAAK,EAAEL,MAFoB;AAG3BM,MAAAA,GAAG,EAAEL,IAHsB;AAI3BM,MAAAA,IAAI,EAAE,CAAChB,IAAD,EAAOC,OAAP,CAJqB;AAK3BgB,MAAAA,QAAQ,EAAEf;AALiB,KAArB,CAAR,CA1CmD,CAgD/C;;AAEJ,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,OAApB,EAA6BiB,CAAC,EAA9B,EAAkC;AAChC;AACAR,MAAAA,IAAI,CAACQ,CAAD,CAAJ,GAAUT,MAAM,CAACU,MAAjB,CAFgC,CAEP;;AAEzB,WAAK,IAAIC,EAAE,GAAG3B,IAAI,CAACyB,CAAD,CAAb,EAAkBG,EAAE,GAAG5B,IAAI,CAACyB,CAAC,GAAG,CAAL,CAA3B,EAAoCI,CAAC,GAAGF,EAA7C,EAAiDE,CAAC,GAAGD,EAArD,EAAyDC,CAAC,EAA1D,EAA8D;AAC5D;AACA,YAAIC,CAAC,GAAGhC,MAAM,CAAC+B,CAAD,CAAd,CAF4D,CAEzC;;AAEnB,YAAIE,CAAC,GAAGpC,OAAO,GAAGiB,EAAE,CAACnB,CAAD,EAAIG,OAAO,CAACiC,CAAD,CAAX,CAAL,GAAuBjB,EAAE,CAAChB,OAAO,CAACiC,CAAD,CAAR,EAAapC,CAAb,CAAxC,CAJ4D,CAIH;;AAEzD,YAAI,CAACiB,EAAE,CAACqB,CAAD,EAAIpB,IAAJ,CAAP,EAAkB;AAChB;AACAK,UAAAA,MAAM,CAACgB,IAAP,CAAYF,CAAZ;AACAf,UAAAA,OAAO,CAACiB,IAAR,CAAaD,CAAb;AACD;AACF;AACF,KAlEkD,CAkEjD;;;AAGFd,IAAAA,IAAI,CAACT,OAAD,CAAJ,GAAgBQ,MAAM,CAACU,MAAvB,CArEmD,CAqEpB;;AAE/B,WAAOR,CAAP;AACD,GAxED;AAyED,CAhGM,CAFA","sourcesContent":["import { factory } from '../../../utils/factory';\nvar name = 'algorithm11';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm11 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});"]},"metadata":{},"sourceType":"module"}