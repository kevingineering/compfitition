{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/comptable/CompetitionTable.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../../contexts/goals/goalContext';\nimport CompetitionContext from '../../../contexts/competitions/competitionContext';\nimport GoalProgress from '../../goals/page/GoalProgress';\nimport CompInfo from './CompInfo';\nimport CompChart from './CompChart';\nimport AlertContext from '../../../contexts/alerts/alertContext';\nimport CompButtons from './CompButtons';\n\nconst CompetitionTable = ({\n  isAdminView,\n  isStarted,\n  isActive,\n  isComplete,\n  time,\n  competitionArray\n}) => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent,\n        updateGoalTracker = _useContext.updateGoalTracker,\n        goalsError = _useContext.goalsError;\n\n  const _useContext2 = useContext(CompetitionContext),\n        competition = _useContext2.competition,\n        getCompetitionGoals = _useContext2.getCompetitionGoals;\n\n  const _useContext3 = useContext(AlertContext),\n        setAlert = _useContext3.setAlert;\n\n  const name = goalCurrent.name,\n        units = goalCurrent.units,\n        tracker = goalCurrent.tracker,\n        type = goalCurrent.type,\n        _id = goalCurrent._id;\n\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1]; //fill missed past values in tracker array\n\n\n  useEffect(() => {\n    if (type === 'pass/fail') {\n      setRecord(record.map((value, index) => {\n        if (index < time && value === null) {\n          value = false;\n        }\n\n        return value;\n      }));\n    } //eslint-disable-next-line\n\n  }, []); //calc goal value of user\n\n  let value = 0;\n\n  if (type === 'difference') {\n    let temp = record.filter(value => value !== null);\n    value = temp.pop() - record[0];\n  } else if (type === 'total') {\n    for (let i = 0; i < record.length; i++) {\n      value += record[i];\n    }\n  } else if (type === 'pass/fail') {\n    for (let i = 0; i < record.length; i++) {\n      if (record[i] === true) value++;\n    }\n  } //handleSave - passed down to goal containers\n\n\n  const handleSave = async record => {\n    //await updateGoalTracker(record, _id);\n    await updateGoalTracker(record, _id);\n\n    if (goalsError) {\n      setAlert(goalsError);\n    } else {\n      setAlert('Goal saved!');\n      getCompetitionGoals(competition._id);\n    }\n  };\n\n  let isOwner = true;\n  return React.createElement(\"div\", {\n    className: \"competition-table-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, !Object.entries(competition).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, isStarted && React.createElement(CompChart, {\n    goal: goalCurrent,\n    time: time,\n    competitionArray: competitionArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), isStarted && !isComplete && React.createElement(GoalProgress, {\n    type: type,\n    time: time,\n    record: record,\n    setRecord: setRecord,\n    units: units,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(CompInfo, {\n    goal: goalCurrent,\n    record: record,\n    time: time,\n    value: value,\n    isStarted: isStarted,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(CompButtons, {\n    isAdminView: isAdminView,\n    isOwner: isOwner,\n    isStarted: isStarted,\n    isActive: isActive,\n    handleSave: handleSave,\n    record: record,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })));\n};\n\nexport default CompetitionTable;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/comptable/CompetitionTable.js"],"names":["React","useContext","useState","useEffect","GoalContext","CompetitionContext","GoalProgress","CompInfo","CompChart","AlertContext","CompButtons","CompetitionTable","isAdminView","isStarted","isActive","isComplete","time","competitionArray","goalCurrent","updateGoalTracker","goalsError","competition","getCompetitionGoals","setAlert","name","units","tracker","type","_id","record","setRecord","map","value","index","temp","filter","pop","i","length","handleSave","isOwner","Object","entries"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../../contexts/goals/goalContext';\nimport CompetitionContext from '../../../contexts/competitions/competitionContext';\nimport GoalProgress from '../../goals/page/GoalProgress';\nimport CompInfo from './CompInfo';\nimport CompChart from './CompChart';\nimport AlertContext from '../../../contexts/alerts/alertContext';\nimport CompButtons from './CompButtons';\n\nconst CompetitionTable = ({isAdminView, isStarted, isActive, isComplete, time, competitionArray }) => {\n\n  const { \n    goalCurrent, \n    updateGoalTracker,\n    goalsError\n  } = useContext(GoalContext);\n\n  const { competition, getCompetitionGoals } = useContext(CompetitionContext);\n\n  const { setAlert } = useContext(AlertContext);\n\n  const { name, units, tracker, type, _id } = goalCurrent;\n\n  const [record, setRecord] = useState(tracker);\n\n  //fill missed past values in tracker array\n  useEffect(() => {\n    if (type === 'pass/fail') {\n      setRecord(record.map((value, index) => {\n        if (index < time && value === null) {\n          value = false;\n        }\n        return value;\n      }));\n    }\n    //eslint-disable-next-line\n  }, []);\n\n  //calc goal value of user\n  let value = 0;\n  if (type === 'difference') {\n    let temp = record.filter(value => value !== null)\n    value = temp.pop() - record[0];\n  } else if (type === 'total') {\n    for (let i = 0; i < record.length; i++ ) {\n      value += record[i];\n    }\n  } else if (type === 'pass/fail') {\n    for (let i = 0; i < record.length; i++ ) {\n      if (record[i] === true) \n        value++;\n    }\n  }\n\n  //handleSave - passed down to goal containers\n  const handleSave = async (record) => {\n    //await updateGoalTracker(record, _id);\n    await updateGoalTracker(record, _id);\n    if (goalsError) {\n      setAlert(goalsError);\n    }\n    else {\n      setAlert('Goal saved!');\n      getCompetitionGoals(competition._id);\n    }\n  }\n\n  let isOwner = true;\n\n  return (\n    <div className='competition-table-container'>\n      {!Object.entries(competition).length ? (\n        <h2>Loading...</h2>\n      ) : (\n        <React.Fragment>\n          <h2 className='collection-header'>{name}</h2>\n          <ul>\n            {isStarted && \n              <CompChart \n                goal={goalCurrent}\n                time={time}\n                competitionArray={competitionArray}\n              />\n            }\n            {isStarted && !isComplete &&\n              <GoalProgress \n                type={type}\n                time={time}\n                record={record}\n                setRecord={setRecord}\n                units={units}\n              />\n            }\n            <CompInfo \n              goal={goalCurrent}\n              record={record}\n              time={time}\n              value={value}\n              isStarted={isStarted}\n            />\n          </ul>\n          <CompButtons \n            isAdminView={isAdminView}\n            isOwner={isOwner}\n            isStarted={isStarted}\n            isActive={isActive}\n            handleSave={handleSave}\n            record={record}\n          />        \n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default CompetitionTable;"]},"metadata":{},"sourceType":"module"}