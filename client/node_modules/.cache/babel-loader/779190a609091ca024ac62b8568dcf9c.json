{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalDifference.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartDifference from './GoalChartDifference';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport GoalProgress from './goalPieces/GoalProgress';\n\nconst GoalDifference = ({\n  handleSave,\n  isOwner,\n  goal: {\n    duration,\n    startDate,\n    units,\n    total,\n    compId,\n    tracker\n  },\n  time,\n  isStarted\n}) => {\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1]; //state for controlled variables\n\n\n  const _useState3 = useState(record[time]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        today = _useState4[0],\n        setToday = _useState4[1];\n\n  if (today === null) setToday(''); //calc change to date\n\n  let temp = record.filter(value => value !== null);\n  let count = temp.pop() - record[0];\n  let progress = `Change: ${count > 0 ? '+' : ''}${count} ${units}`; //if value is less than zero, null, if value is empty ('') do not record, otherwise set value in array\n\n  const handleChange = e => {\n    if (e.target.value < 0) return null;else {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time + 1) {\n          if (e.target.value === '') return null;\n          value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, timeHours >= 0 ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(GoalChartDifference, {\n    duration: duration,\n    units: units,\n    total: total,\n    record: record,\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), time !== duration && isOwner && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(GoalProgress, {\n    type: type,\n    time: time,\n    record: record,\n    setRecord: setRecord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Record Your Progress\")), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Today:\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"center\",\n    id: \"chart-input\",\n    type: \"number\",\n    value: today,\n    name: \"today\",\n    onChange: handleChange,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), units)), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Start Date: \", moment.utc(startDate).format('MMMM Do, YYYY')), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Start: \", record[0], \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, time === duration ? `Final: ${record[0] + count} ${units}` : `Day: ${time + 1} / ${duration}`))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, progress), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Progress: \", round(count / (total - record[0]) * 100), \"%\")))), time !== duration && isOwner && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => handleSave(record),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Save Goal\"), React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }))) : React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Start: \", record[0], \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Begins \", moment.utc(startDate).format('MMM Do')))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Goal: \", total, \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Duration: \", duration, \" days\")))));\n};\n\nGoalDifference.propTypes = {\n  handleSave: PropTypes.func,\n  goal: PropTypes.object.isRequired,\n  isOwner: PropTypes.bool.isRequired\n};\nexport default GoalDifference;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalDifference.js"],"names":["React","useState","moment","GoalChartDifference","round","PropTypes","GoalProgress","GoalDifference","handleSave","isOwner","goal","duration","startDate","units","total","compId","tracker","time","isStarted","record","setRecord","today","setToday","temp","filter","value","count","pop","progress","handleChange","e","target","map","index","parseFloat","timeHours","type","utc","format","propTypes","func","object","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartDifference from './GoalChartDifference';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport GoalProgress from './goalPieces/GoalProgress';\n\nconst GoalDifference = ({handleSave, isOwner, goal: { duration, startDate, units, total, compId, tracker }, time, isStarted}) => {\n  const [record, setRecord] = useState(tracker);\n\n  //state for controlled variables\n  const [today, setToday] = useState(record[time]);\n  if (today === null) setToday('');\n\n  //calc change to date\n  let temp = record.filter(value => value !== null)\n  let count = temp.pop() - record[0];\n  let progress = `Change: ${count > 0 ? '+' : ''}${count} ${units}`\n\n  //if value is less than zero, null, if value is empty ('') do not record, otherwise set value in array\n  const handleChange = e => {\n    if (e.target.value < 0)\n      return null;\n    else {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time + 1) {\n          if (e.target.value === '')\n            return null;\n          value = parseFloat(e.target.value);\n        }\n        return value;\n      }));\n    } \n  }\n\n  return (\n    <React.Fragment>\n      {timeHours >= 0 ? (\n        <React.Fragment>\n          <ul>\n            {/* Chart */}\n            <GoalChartDifference duration={duration} units={units} total={total} record={record} time={time}/>\n            {/* Progress */}\n            { time !== duration && isOwner && (\n              <React.Fragment>\n                <GoalProgress \n                  type={type}\n                  time={time}\n                  record={record}\n                  setRecord={setRecord}\n                />\n                <li className='table-info lr-border center'>\n                  <strong>Record Your Progress</strong>\n                </li>\n                <li className='table-info lr-border center'>\n                  <span>\n                    Today: \n                  </span>\n                  <span>\n                    <input \n                      className='center'\n                      id='chart-input'\n                      type='number' \n                      value={today} \n                      name='today' \n                      onChange={handleChange}\n                      min='0'\n                    />\n                    {units}\n                  </span>\n                </li>\n                <hr/>\n              </React.Fragment>\n            )}\n            {/* Info */}\n            <li className='table-info lr-border'>\n              Start Date: {moment.utc(startDate).format('MMMM Do, YYYY')}\n            </li>\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  Start: {record[0]} {units}\n                </span>\n                <span className='right'>\n                  {time === duration ? `Final: ${record[0] + count} ${units}` : `Day: ${time + 1} / ${duration}`}\n                </span>\n              </div>\n            </li>\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  {progress}\n                </span>\n                <span className='right'>\n                  Progress: {round(count / (total - record[0]) * 100)}%\n                </span>\n              </div>\n            </li>\n          </ul>\n          {/* Start */}\n          { time !== duration && isOwner &&\n            <React.Fragment>\n              <button className='btn btn-primary btn-block' onClick={() => handleSave(record)}>\n                Save Goal\n              </button>\n              <p className='lr-border' />\n            </React.Fragment>\n          }\n        </React.Fragment>\n      ) : (\n        <ul>\n          {/* Info */}\n          <li className='table-info lr-border'>\n            <div className='space-between'>\n              <span>\n                Start: {record[0]} {units}\n              </span>\n              <span className='right'>\n                Begins {moment.utc(startDate).format('MMM Do')}\n              </span>\n            </div>\n          </li>\n          <li className='table-info lr-border'>\n            <div className='space-between'>\n              <span>\n                Goal: {total} {units}\n              </span>\n              <span className='right'>\n                Duration: {duration} days\n              </span>\n            </div>\n          </li>\n        </ul>\n      )}\n    </React.Fragment>\n  )\n};\n\nGoalDifference.propTypes = {\n  handleSave: PropTypes.func,\n  goal: PropTypes.object.isRequired,\n  isOwner: PropTypes.bool.isRequired\n};\n\nexport default GoalDifference;"]},"metadata":{},"sourceType":"module"}