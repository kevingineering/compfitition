{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport Leaderboard from './Leaderboard'; // import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\n\nimport moment from 'moment';\n\nconst CompetitionPage = props => {\n  const goalContext = useContext(GoalContext);\n  const goalCurrent = goalContext.goalCurrent,\n        clearCurrentGoal = goalContext.clearCurrentGoal,\n        goalsError = goalContext.goalsError,\n        updateGoalTracker = goalContext.updateGoalTracker;\n  const alertContext = useContext(AlertContext);\n  const setAlert = alertContext.setAlert,\n        clearAlert = alertContext.clearAlert;\n  const competitionContext = useContext(CompetitionContext);\n  const getCompetitionGoals = competitionContext.getCompetitionGoals,\n        competition = competitionContext.competition,\n        competitionGoals = competitionContext.competitionGoals,\n        competitionLoading = competitionContext.competitionLoading,\n        competitionError = competitionContext.competitionError,\n        deleteCompetition = competitionContext.deleteCompetition,\n        clearCompetition = competitionContext.clearCompetition;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        deleteToggle = _useState2[0],\n        setDeleteToggle = _useState2[1];\n\n  const name = goalCurrent.name,\n        type = goalCurrent.type,\n        startDate = goalCurrent.startDate,\n        duration = goalCurrent.duration,\n        compId = goalCurrent.compId;\n  const _id = competition._id,\n        goalId = competition.goalId,\n        adminIds = competition.adminIds,\n        isMax = competition.isMax; //console.log(goalsError, updateGoalTracker, type, goalId, adminIds, isMax, competitionLoading);\n  //get competition goals if competition changes\n\n  useEffect(() => {\n    if (Object.entries(competition).length !== 0) getCompetitionGoals(competition._id); //eslint-disable-next-line\n  }, [competition]); //calc time to determine which day of competition we are on\n\n  let time = moment().startOf('day').diff(startDate, 'days'); //handleDelete\n\n  const handleDelete = async () => {\n    await deleteCompetition(_id);\n\n    if (competitionError) {\n      setAlert(competitionError);\n    } else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  }; // //handleSave - passed down to goal containers\n  // const handleSave = async (record) => {\n  //   await updateGoalTracker(record, _id);\n  //   if (goalsError) {\n  //     setAlert(goalsError);\n  //   }\n  //   else {\n  //     setAlert('Goal saved!');\n  //   }\n  // }\n\n\n  return React.createElement(Leaderboard, {\n    goals: competitionGoals,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }); // return (\n  //   <div className='form-container'>\n  //     {!Object.entries(competition).length ? (\n  //       <h2>Loading...</h2>\n  //     ) : (\n  //       <React.Fragment>\n  //         <h2 className='collection-header'>{name}</h2>\n  //         {/* Goal Container */}\n  //         {/* Modify Button */}\n  //         {time <= duration &&\n  //           <React.Fragment>\n  //             <Link \n  //               to='/competitionform' \n  //               className='btn btn-primary btn-block center' \n  //               onClick={clearAlert}\n  //             >\n  //               Modify Competition\n  //             </Link>\n  //           </React.Fragment>\n  //         }\n  //         {/* Delete Button */}\n  //         {!deleteToggle &&\n  //         <React.Fragment>\n  //           <p className='lr-border'/>\n  //           <button \n  //             className='btn btn-primary btn-block' \n  //             onClick={() => setDeleteToggle(true)}\n  //           >\n  //             Delete Competition\n  //           </button>\n  //         </React.Fragment>\n  //       }        \n  //       {/*Delete module*/}\n  //       {deleteToggle && (\n  //         <React.Fragment>\n  //           <hr/>\n  //           <span className='alert lr-border'>\n  //             Are you sure you want to delete this competition? This will affect multiple users, and deletions cannot be undone.\n  //           </span>\n  //           <button\n  //             className='btn btn-danger btn-split'\n  //             onClick={handleDelete}\n  //           >Yes</button>\n  //           <button\n  //             className='btn btn-primary btn-split'\n  //             onClick={() => setDeleteToggle(false)}\n  //           >No</button>\n  //         </React.Fragment>\n  //       )}\n  //       </React.Fragment>\n  //     )}\n  //   </div>\n  // )\n};\n\nexport default CompetitionPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js"],"names":["React","useContext","useState","useEffect","Link","GoalContext","AlertContext","CompetitionContext","Leaderboard","moment","CompetitionPage","props","goalContext","goalCurrent","clearCurrentGoal","goalsError","updateGoalTracker","alertContext","setAlert","clearAlert","competitionContext","getCompetitionGoals","competition","competitionGoals","competitionLoading","competitionError","deleteCompetition","clearCompetition","deleteToggle","setDeleteToggle","name","type","startDate","duration","compId","_id","goalId","adminIds","isMax","Object","entries","length","time","startOf","diff","handleDelete","history","push"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport Leaderboard from './Leaderboard';\n// import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\nimport moment from 'moment';\n\nconst CompetitionPage = props => {\n  const goalContext = useContext(GoalContext);\n  const { goalCurrent, clearCurrentGoal, goalsError, updateGoalTracker } = goalContext;\n\n  const alertContext = useContext(AlertContext);\n  const { setAlert, clearAlert } = alertContext;\n\n  const competitionContext = useContext(CompetitionContext);\n  const { getCompetitionGoals, competition, competitionGoals, competitionLoading, competitionError, deleteCompetition, clearCompetition } = competitionContext;\n\n  const [deleteToggle, setDeleteToggle] = useState(false);\n\n  const { name, type, startDate, duration, compId } = goalCurrent;\n  const { _id, goalId, adminIds, isMax } = competition;\n\n  //console.log(goalsError, updateGoalTracker, type, goalId, adminIds, isMax, competitionLoading);\n\n  //get competition goals if competition changes\n  useEffect(() => {\n    if(Object.entries(competition).length !== 0)\n      getCompetitionGoals(competition._id);\n    //eslint-disable-next-line\n  }, [competition])\n\n  //calc time to determine which day of competition we are on\n  let time = moment().startOf('day').diff(startDate, 'days');\n  \n  //handleDelete\n  const handleDelete = async () => {\n    await deleteCompetition(_id);\n    if (competitionError) {\n      setAlert(competitionError);\n    }\n    else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  };\n\n  // //handleSave - passed down to goal containers\n  // const handleSave = async (record) => {\n  //   await updateGoalTracker(record, _id);\n  //   if (goalsError) {\n  //     setAlert(goalsError);\n  //   }\n  //   else {\n  //     setAlert('Goal saved!');\n  //   }\n  // }\n\n  return (\n    <Leaderboard goals={competitionGoals}/>\n  )\n\n  // return (\n  //   <div className='form-container'>\n  //     {!Object.entries(competition).length ? (\n  //       <h2>Loading...</h2>\n  //     ) : (\n  //       <React.Fragment>\n  //         <h2 className='collection-header'>{name}</h2>\n  //         {/* Goal Container */}\n  //         {/* Modify Button */}\n  //         {time <= duration &&\n  //           <React.Fragment>\n  //             <Link \n  //               to='/competitionform' \n  //               className='btn btn-primary btn-block center' \n  //               onClick={clearAlert}\n  //             >\n  //               Modify Competition\n  //             </Link>\n  //           </React.Fragment>\n  //         }\n  //         {/* Delete Button */}\n  //         {!deleteToggle &&\n  //         <React.Fragment>\n  //           <p className='lr-border'/>\n  //           <button \n  //             className='btn btn-primary btn-block' \n  //             onClick={() => setDeleteToggle(true)}\n  //           >\n  //             Delete Competition\n  //           </button>\n  //         </React.Fragment>\n  //       }        \n  //       {/*Delete module*/}\n  //       {deleteToggle && (\n  //         <React.Fragment>\n  //           <hr/>\n  //           <span className='alert lr-border'>\n  //             Are you sure you want to delete this competition? This will affect multiple users, and deletions cannot be undone.\n  //           </span>\n  //           <button\n  //             className='btn btn-danger btn-split'\n  //             onClick={handleDelete}\n  //           >Yes</button>\n  //           <button\n  //             className='btn btn-primary btn-split'\n  //             onClick={() => setDeleteToggle(false)}\n  //           >No</button>\n  //         </React.Fragment>\n  //       )}\n  //       </React.Fragment>\n  //     )}\n  //   </div>\n  // )\n}\n\nexport default CompetitionPage;"]},"metadata":{},"sourceType":"module"}