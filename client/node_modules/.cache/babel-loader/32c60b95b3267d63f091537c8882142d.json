{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/comptable/CompetitionTable.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../../contexts/goals/goalContext';\nimport CompetitionContext from '../../../contexts/competitions/competitionContext';\nimport GoalProgress from '../../goals/page/GoalProgress';\nimport CompChart from './CompChart';\nimport AlertContext from '../../../contexts/alerts/alertContext';\nimport { useHistory } from 'react-router-dom';\nimport CompButtons from './CompButtons';\n\nconst CompetitionTable = ({\n  time,\n  isAdmin,\n  isAdminView,\n  isStarted\n}) => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent,\n        updateGoalTracker = _useContext.updateGoalTracker,\n        goalsError = _useContext.goalsError,\n        clearCurrentGoal = _useContext.clearCurrentGoal;\n\n  const _useContext2 = useContext(CompetitionContext),\n        competition = _useContext2.competition,\n        competitionGoals = _useContext2.competitionGoals,\n        competitionParticipants = _useContext2.competitionParticipants,\n        competitionError = _useContext2.competitionError,\n        deleteCompetition = _useContext2.deleteCompetition,\n        clearCompetition = _useContext2.clearCompetition;\n\n  const _useContext3 = useContext(AlertContext),\n        setAlert = _useContext3.setAlert;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        deleteToggle = _useState2[0],\n        setDeleteToggle = _useState2[1];\n\n  const name = goalCurrent.name,\n        startDate = goalCurrent.startDate,\n        duration = goalCurrent.duration;\n  let history = useHistory(); //handleSave - passed down to goal containers\n\n  const handleSave = async record => {\n    await updateGoalTracker(record, _id);\n\n    if (goalsError) {\n      setAlert(goalsError);\n    } else {\n      setAlert('Goal saved!');\n    }\n  };\n\n  let isOwner = true;\n  return React.createElement(\"div\", {\n    className: \"competition-table-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, !Object.entries(competition).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, name), isStarted && React.createElement(CompChart, {\n    goal: goalCurrent,\n    record: record,\n    setRecord: setRecord,\n    time: time,\n    isComplete: isComplete,\n    isOwner: isOwner,\n    isStarted: isStarted,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), isStarted && !isComplete && React.createElement(GoalProgress, {\n    type: type,\n    time: time,\n    record: record,\n    setRecord: setRecord,\n    units: units,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(GoalInfo, {\n    goal: goalCurrent,\n    record: record,\n    time: time,\n    value: value,\n    isStarted: isStarted,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(CompButtons, {\n    isAdmin: isAdmin,\n    isAdminView: isAdminView,\n    isOwner: isOwner,\n    isStarted: isStarted,\n    isActive: isActive,\n    handleSave: handleSave,\n    record: record,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};\n\nexport default CompetitionTable;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/comptable/CompetitionTable.js"],"names":["React","useContext","useState","useEffect","GoalContext","CompetitionContext","GoalProgress","CompChart","AlertContext","useHistory","CompButtons","CompetitionTable","time","isAdmin","isAdminView","isStarted","goalCurrent","updateGoalTracker","goalsError","clearCurrentGoal","competition","competitionGoals","competitionParticipants","competitionError","deleteCompetition","clearCompetition","setAlert","deleteToggle","setDeleteToggle","name","startDate","duration","history","handleSave","record","_id","isOwner","Object","entries","length","setRecord","isComplete","type","units","value","isActive"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../../contexts/goals/goalContext';\nimport CompetitionContext from '../../../contexts/competitions/competitionContext';\nimport GoalProgress from '../../goals/page/GoalProgress';\nimport CompChart from './CompChart';\nimport AlertContext from '../../../contexts/alerts/alertContext';\nimport { useHistory } from 'react-router-dom';\nimport CompButtons from './CompButtons';\n\nconst CompetitionTable = ({time, isAdmin, isAdminView, isStarted}) => {\n\n  const { \n    goalCurrent, \n    updateGoalTracker,\n    goalsError,\n    clearCurrentGoal, \n  } = useContext(GoalContext);\n\n  const { \n    competition, \n    competitionGoals, \n    competitionParticipants, \n    competitionError, \n    deleteCompetition, \n    clearCompetition \n  } = useContext(CompetitionContext);\n\n  const { \n    setAlert\n  } = useContext(AlertContext);\n\n  const [deleteToggle, setDeleteToggle] = useState(false);\n\n  const { name, startDate, duration } = goalCurrent;\n\n\n  let history = useHistory();\n\n  //handleSave - passed down to goal containers\n  const handleSave = async (record) => {\n    await updateGoalTracker(record, _id);\n    if (goalsError) {\n      setAlert(goalsError);\n    }\n    else {\n      setAlert('Goal saved!');\n    }\n  }\n\n  let isOwner = true;\n  \n  return (\n    <div className='competition-table-container'>\n      {!Object.entries(competition).length ? (\n        <h2>Loading...</h2>\n      ) : (\n        <React.Fragment>\n          <h2 className='collection-header'>{name}</h2>\n          {isStarted && \n            <CompChart \n              goal={goalCurrent}\n              record={record}\n              setRecord={setRecord} \n              time={time}\n              isComplete={isComplete}\n              isOwner={isOwner}\n              isStarted={isStarted}\n            />\n          }\n          {isStarted && !isComplete &&\n            <GoalProgress \n              type={type}\n              time={time}\n              record={record}\n              setRecord={setRecord}\n              units={units}\n            />\n          }\n          <GoalInfo \n            goal={goalCurrent}\n            record={record}\n            time={time}\n            value={value}\n            isStarted={isStarted}\n          />\n          <CompButtons \n            isAdmin={isAdmin}\n            isAdminView={isAdminView}\n            isOwner={isOwner}\n            isStarted={isStarted}\n            isActive={isActive}\n            handleSave={handleSave}\n            record={record}\n          />        \n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default CompetitionTable;"]},"metadata":{},"sourceType":"module"}