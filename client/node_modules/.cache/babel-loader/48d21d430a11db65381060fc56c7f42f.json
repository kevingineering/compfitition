{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm07';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createAlgorithm07 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/mathjs/es/type/matrix/utils/algorithm07.js"],"names":["factory","DimensionError","name","dependencies","createAlgorithm07","_ref","typed","DenseMatrix","algorithm07","a","b","callback","asize","_size","adt","_datatype","bsize","bdt","length","RangeError","rows","columns","dt","zero","cf","convert","find","i","j","cdata","c","data","size","datatype","xa","xb","wa","wb","mark","_scatter","va","vb","m","w","x","values","_values","index","_index","ptr","_ptr","k","k1"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm07';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createAlgorithm07 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}