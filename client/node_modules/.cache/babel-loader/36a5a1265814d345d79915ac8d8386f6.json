{"ast":null,"code":"const CreateArray = (competitionParticipants, competitionGoals, type, time, duration, isMax) => {\n  //create array used for leaderboard and chart - Array = [name, total, [runningTotals]]\n  let competitionArray = [];\n  competitionArray = competitionGoals.map(goal => {\n    //calc total to date\n    const tracker = goal.tracker;\n    let count = 0;\n\n    if (type === 'pass/fail') {\n      for (let i = 0; i < tracker.length; i++) {\n        if (tracker[i]) count++;\n      }\n    } else if (type === 'total') {\n      for (let i = 0; i < tracker.length; i++) {\n        count += tracker[i];\n      }\n    } else if (type === 'difference') {\n      let temp = tracker.filter(value => value !== null);\n      console.log(temp);\n      if (temp.length > 1) count = temp.pop() - temp[0];else count = 0;\n    } //pair user name with goal\n\n\n    let temp = competitionParticipants.find(user => user._id === goal.user);\n    let name = temp.alias ? temp.alias : temp.firstName; //get tracker values to date (for chart)\n\n    let trackerValues = [];\n    let runningTotal = 0;\n    const length = time < duration ? time + 1 : duration;\n\n    if (type === 'pass/fail') {\n      for (let i = 0; i < length; i++) {\n        if (tracker[i]) runningTotal++;\n        trackerValues.push(runningTotal);\n      }\n    } else if (type === 'total') {\n      for (let i = 0; i < length; i++) {\n        runningTotal += tracker[i];\n        trackerValues.push(runningTotal);\n      }\n    } else if (type === 'difference') {\n      //slice is time + 2 because 0th value is start and we want to include today which is time + 1\n      trackerValues.push(tracker.slice(0, time + 2));\n    } //package in array\n\n\n    return [name, count, trackerValues];\n  }); //sort competitionArray\n\n  if (isMax) competitionArray.sort((a, b) => b[1] - a[1]);else competitionArray.sort((a, b) => a[1] - b[1]);\n  return competitionArray;\n};\n\nexport default CreateArray;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/comptable/CreateArray.js"],"names":["CreateArray","competitionParticipants","competitionGoals","type","time","duration","isMax","competitionArray","map","goal","tracker","count","i","length","temp","filter","value","console","log","pop","find","user","_id","name","alias","firstName","trackerValues","runningTotal","push","slice","sort","a","b"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,uBAAD,EAA0BC,gBAA1B,EAA4CC,IAA5C,EAAkDC,IAAlD,EAAwDC,QAAxD,EAAkEC,KAAlE,KAA4E;AAE9F;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AAEAA,EAAAA,gBAAgB,GAAGL,gBAAgB,CAACM,GAAjB,CAAqBC,IAAI,IAAI;AAC9C;AAD8C,UAEvCC,OAFuC,GAE5BD,IAF4B,CAEvCC,OAFuC;AAG9C,QAAIC,KAAK,GAAG,CAAZ;;AACA,QAAIR,IAAI,KAAK,WAAb,EAAyB;AACvB,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAIF,OAAO,CAACE,CAAD,CAAX,EAAgBD,KAAK;AACtB;AACF,KAJD,MAKK,IAAIR,IAAI,KAAK,OAAb,EAAsB;AACzB,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCD,QAAAA,KAAK,IAAID,OAAO,CAACE,CAAD,CAAhB;AACD;AACF,KAJI,MAKA,IAAIT,IAAI,KAAK,YAAb,EAA2B;AAC9B,UAAIW,IAAI,GAAGJ,OAAO,CAACK,MAAR,CAAeC,KAAK,IAAIA,KAAK,KAAK,IAAlC,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,UAAIA,IAAI,CAACD,MAAL,GAAc,CAAlB,EACEF,KAAK,GAAGG,IAAI,CAACK,GAAL,KAAaL,IAAI,CAAC,CAAD,CAAzB,CADF,KAGEH,KAAK,GAAG,CAAR;AACH,KArB6C,CAuB9C;;;AACA,QAAIG,IAAI,GAAGb,uBAAuB,CAACmB,IAAxB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAab,IAAI,CAACY,IAAvD,CAAX;AACA,QAAIE,IAAI,GAAGT,IAAI,CAACU,KAAL,GAAaV,IAAI,CAACU,KAAlB,GAA0BV,IAAI,CAACW,SAA1C,CAzB8C,CA2B9C;;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,YAAY,GAAG,CAAnB;AACA,UAAMd,MAAM,GAAGT,IAAI,GAAGC,QAAP,GAAkBD,IAAI,GAAG,CAAzB,GAA6BC,QAA5C;;AACA,QAAIF,IAAI,KAAK,WAAb,EAAyB;AACvB,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/B,YAAIF,OAAO,CAACE,CAAD,CAAX,EAAgBe,YAAY;AAC5BD,QAAAA,aAAa,CAACE,IAAd,CAAmBD,YAAnB;AACD;AACF,KALD,MAMK,IAAIxB,IAAI,KAAK,OAAb,EAAsB;AACzB,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/Be,QAAAA,YAAY,IAAIjB,OAAO,CAACE,CAAD,CAAvB;AACAc,QAAAA,aAAa,CAACE,IAAd,CAAmBD,YAAnB;AACD;AACF,KALI,MAMA,IAAIxB,IAAI,KAAK,YAAb,EAA2B;AAC9B;AACAuB,MAAAA,aAAa,CAACE,IAAd,CAAmBlB,OAAO,CAACmB,KAAR,CAAc,CAAd,EAAiBzB,IAAI,GAAG,CAAxB,CAAnB;AACD,KA9C6C,CA+C9C;;;AACA,WAAO,CAACmB,IAAD,EAAOZ,KAAP,EAAce,aAAd,CAAP;AACD,GAjDkB,CAAnB,CAL8F,CAwD9F;;AACA,MAAIpB,KAAJ,EACEC,gBAAgB,CAACuB,IAAjB,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAxC,EADF,KAGExB,gBAAgB,CAACuB,IAAjB,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAxC;AAEF,SAAOzB,gBAAP;AACD,CA/DD;;AAiEA,eAAeP,WAAf","sourcesContent":["const CreateArray = (competitionParticipants, competitionGoals, type, time, duration, isMax) => {\n\n  //create array used for leaderboard and chart - Array = [name, total, [runningTotals]]\n  let competitionArray = [];\n  \n  competitionArray = competitionGoals.map(goal => {\n    //calc total to date\n    const {tracker} = goal;\n    let count = 0;\n    if (type === 'pass/fail'){\n      for (let i = 0; i < tracker.length; i++) {\n        if (tracker[i]) count++;\n      }\n    }\n    else if (type === 'total') {\n      for (let i = 0; i < tracker.length; i++) {\n        count += tracker[i];\n      }\n    }\n    else if (type === 'difference') {\n      let temp = tracker.filter(value => value !== null)\n      console.log(temp)\n      if (temp.length > 1)\n        count = temp.pop() - temp[0];\n      else\n        count = 0;\n    }\n\n    //pair user name with goal\n    let temp = competitionParticipants.find(user => user._id === goal.user);\n    let name = temp.alias ? temp.alias : temp.firstName;\n\n    //get tracker values to date (for chart)\n    let trackerValues = [];\n    let runningTotal = 0;\n    const length = time < duration ? time + 1 : duration;\n    if (type === 'pass/fail'){\n      for (let i = 0; i < length; i++) {\n        if (tracker[i]) runningTotal++;\n        trackerValues.push(runningTotal);\n      }\n    }\n    else if (type === 'total') {\n      for (let i = 0; i < length; i++) {\n        runningTotal += tracker[i];\n        trackerValues.push(runningTotal);\n      }\n    }\n    else if (type === 'difference') {\n      //slice is time + 2 because 0th value is start and we want to include today which is time + 1\n      trackerValues.push(tracker.slice(0, time + 2))\n    }\n    //package in array\n    return [name, count, trackerValues]\n  })\n\n  //sort competitionArray\n  if (isMax)\n    competitionArray.sort((a, b) => b[1] - a[1]);\n  else \n    competitionArray.sort((a, b) => a[1] - b[1]);\n\n  return competitionArray;\n};\n\nexport default CreateArray;"]},"metadata":{},"sourceType":"module"}