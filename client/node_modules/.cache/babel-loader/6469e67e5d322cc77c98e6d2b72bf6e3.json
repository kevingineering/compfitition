{"ast":null,"code":"import { factory } from '../../../utils/factory';\nvar name = 'algorithm12';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createAlgorithm12 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  return function algorithm12(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n});","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/mathjs/es/type/matrix/utils/algorithm12.js"],"names":["factory","name","dependencies","createAlgorithm12","_ref","typed","DenseMatrix","algorithm12","s","b","callback","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","rows","columns","dt","cf","convert","find","cdata","c","data","size","datatype","x","w","j","mark","k0","k1","k","r","i"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nvar name = 'algorithm12';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createAlgorithm12 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function algorithm12(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n});"]},"metadata":{},"sourceType":"module"}