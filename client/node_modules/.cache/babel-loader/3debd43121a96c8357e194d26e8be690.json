{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalDifference.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartDifference from './GoalChartDifference';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport GoalProgress from './goalPieces/GoalProgress';\n\nconst GoalDifference = ({\n  handleSave,\n  isOwner,\n  goal,\n  time,\n  isStarted\n}) => {\n  const duration = goal.duration,\n        startDate = goal.startDate,\n        units = goal.units,\n        total = goal.total,\n        compId = goal.compId,\n        tracker = goal.tracker,\n        type = goal.type;\n\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1]; //state for controlled variables\n\n\n  const _useState3 = useState(record[time]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        today = _useState4[0],\n        setToday = _useState4[1];\n\n  if (today === null) setToday(''); //calc change to date\n\n  let temp = record.filter(value => value !== null);\n  let count = temp.pop() - record[0];\n  let progress = `Change: ${count > 0 ? '+' : ''}${count} ${units}`; //if value is less than zero, null, if value is empty ('') do not record, otherwise set value in array\n\n  const handleChange = e => {\n    if (e.target.value < 0) return null;else {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time + 1) {\n          if (e.target.value === '') return null;\n          value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, isStarted ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(GoalChartDifference, {\n    duration: duration,\n    units: units,\n    total: total,\n    record: record,\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), time !== duration && isOwner && React.createElement(GoalProgress, {\n    type: type,\n    time: time,\n    record: record,\n    setRecord: setRecord,\n    units: units,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Start Date: \", moment.utc(startDate).format('MMMM Do, YYYY')), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Start: \", record[0], \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, time === duration ? `Final: ${record[0] + count} ${units}` : `Day: ${time + 1} / ${duration}`))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, progress), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Progress: \", round(count / (total - record[0]) * 100), \"%\")))), time !== duration && isOwner && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => handleSave(record),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Save Goal\"), React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }))) : React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Start: \", record[0], \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Begins \", moment.utc(startDate).format('MMM Do')))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Goal: \", total, \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Duration: \", duration, \" days\")))));\n};\n\nGoalDifference.propTypes = {\n  handleSave: PropTypes.func,\n  goal: PropTypes.object.isRequired,\n  isOwner: PropTypes.bool.isRequired\n};\nexport default GoalDifference;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalDifference.js"],"names":["React","useState","moment","GoalChartDifference","round","PropTypes","GoalProgress","GoalDifference","handleSave","isOwner","goal","time","isStarted","duration","startDate","units","total","compId","tracker","type","record","setRecord","today","setToday","temp","filter","value","count","pop","progress","handleChange","e","target","map","index","parseFloat","utc","format","propTypes","func","object","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartDifference from './GoalChartDifference';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\nimport GoalProgress from './goalPieces/GoalProgress';\n\nconst GoalDifference = ({handleSave, isOwner, goal, time, isStarted}) => {\n  \n  const { duration, startDate, units, total, compId, tracker, type } = goal;\n  \n  const [record, setRecord] = useState(tracker);\n\n  //state for controlled variables\n  const [today, setToday] = useState(record[time]);\n  if (today === null) setToday('');\n\n  //calc change to date\n  let temp = record.filter(value => value !== null)\n  let count = temp.pop() - record[0];\n  let progress = `Change: ${count > 0 ? '+' : ''}${count} ${units}`\n\n  //if value is less than zero, null, if value is empty ('') do not record, otherwise set value in array\n  const handleChange = e => {\n    if (e.target.value < 0)\n      return null;\n    else {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time + 1) {\n          if (e.target.value === '')\n            return null;\n          value = parseFloat(e.target.value);\n        }\n        return value;\n      }));\n    } \n  }\n\n  return (\n    <React.Fragment>\n      {isStarted ? (\n        <React.Fragment>\n          <ul>\n            <GoalChartDifference \n              duration={duration} \n              units={units} \n              total={total} \n              record={record} \n              time={time}\n            />\n            { time !== duration && isOwner && \n              <GoalProgress \n                type={type}\n                time={time}\n                record={record}\n                setRecord={setRecord}\n                units={units}\n              />\n            }\n            {/* Info */}\n            <li className='table-info lr-border'>\n              Start Date: {moment.utc(startDate).format('MMMM Do, YYYY')}\n            </li>\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  Start: {record[0]} {units}\n                </span>\n                <span className='right'>\n                  {time === duration ? `Final: ${record[0] + count} ${units}` : `Day: ${time + 1} / ${duration}`}\n                </span>\n              </div>\n            </li>\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  {progress}\n                </span>\n                <span className='right'>\n                  Progress: {round(count / (total - record[0]) * 100)}%\n                </span>\n              </div>\n            </li>\n          </ul>\n          {/* Start */}\n          { time !== duration && isOwner &&\n            <React.Fragment>\n              <button className='btn btn-primary btn-block' onClick={() => handleSave(record)}>\n                Save Goal\n              </button>\n              <p className='lr-border' />\n            </React.Fragment>\n          }\n        </React.Fragment>\n      ) : (\n        <ul>\n          {/* Info */}\n          <li className='table-info lr-border'>\n            <div className='space-between'>\n              <span>\n                Start: {record[0]} {units}\n              </span>\n              <span className='right'>\n                Begins {moment.utc(startDate).format('MMM Do')}\n              </span>\n            </div>\n          </li>\n          <li className='table-info lr-border'>\n            <div className='space-between'>\n              <span>\n                Goal: {total} {units}\n              </span>\n              <span className='right'>\n                Duration: {duration} days\n              </span>\n            </div>\n          </li>\n        </ul>\n      )}\n    </React.Fragment>\n  )\n};\n\nGoalDifference.propTypes = {\n  handleSave: PropTypes.func,\n  goal: PropTypes.object.isRequired,\n  isOwner: PropTypes.bool.isRequired\n};\n\nexport default GoalDifference;"]},"metadata":{},"sourceType":"module"}