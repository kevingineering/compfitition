{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport AuthContext from '../../contexts/auth/authContext';\nimport Leaderboard from './complists/Leaderboard';\nimport Participants from './complists/Participants';\nimport InviteTable from './complists/InviteTable';\nimport moment from 'moment';\nimport CompetitionTable from './comptable/CompetitionTable';\n\nconst CompetitionPage = props => {\n  const _useContext = useContext(GoalContext),\n        _useContext$goalCurre = _useContext.goalCurrent,\n        startDate = _useContext$goalCurre.startDate,\n        duration = _useContext$goalCurre.duration,\n        type = _useContext$goalCurre.type;\n\n  const _useContext2 = useContext(AlertContext),\n        setAlert = _useContext2.setAlert,\n        clearAlert = _useContext2.clearAlert;\n\n  const _useContext3 = useContext(CompetitionContext),\n        getCompetitionGoals = _useContext3.getCompetitionGoals,\n        getCompetitionParticipants = _useContext3.getCompetitionParticipants,\n        competition = _useContext3.competition,\n        competitionGoals = _useContext3.competitionGoals,\n        competitionParticipants = _useContext3.competitionParticipants,\n        competitionError = _useContext3.competitionError;\n\n  const _useContext4 = useContext(AuthContext),\n        user = _useContext4.user;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isAdmin = _useState2[0],\n        setIsAdmin = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isAdminView = _useState4[0],\n        setIsAdminView = _useState4[1]; //create array used for leaderboard and chart\n\n\n  let competitionArray = [];\n\n  if (competitionParticipants.length !== 0 && competitionGoals.length !== 0) {\n    competitionArray = competitionGoals.map(goal => {\n      //calc progress\n      const tracker = goal.tracker;\n      let count = 0;\n\n      if (type === 'pass/fail') {\n        for (let i = 0; i < tracker.length; i++) {\n          if (tracker[i]) count++;\n        }\n      } else if (type === 'total') {\n        for (let i = 0; i < tracker.length; i++) {\n          count += tracker[i];\n        }\n      } else {\n        let temp = tracker.filter(value => value !== null);\n        count = temp.pop() - tracker[0];\n      }\n\n      let temp = competitionParticipants.find(user => user._id === goal.user);\n      let name = temp.alias ? temp.alias : temp.firstName;\n      let trackerValues = tracker.splice(time);\n      return [name, count, ...trackerValues];\n    });\n  }\n\n  console.log(competitionArray);\n  useEffect(() => {\n    if (competitionError) setAlert(competitionError); //eslint-disable-next-line\n  }, [competitionError]); //clear alert and competition before redirect\n\n  useEffect(() => {\n    return () => {\n      clearAlert();\n    }; //eslint-disable-next-line\n  }, []); //get competition goals and participants\n\n  useEffect(() => {\n    if (Object.entries(competition).length !== 0) {\n      getCompetitionGoals(competition._id);\n      getCompetitionParticipants(competition._id);\n      if (competition.adminIds.includes(user._id)) setIsAdmin(true);\n    } //eslint-disable-next-line\n\n  }, [competition]); //calc time to determine which day of competition we are on\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  if (time > duration) time = duration;\n  const isComplete = time === duration ? true : false;\n  return React.createElement(\"div\", {\n    className: \"competition-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"grid-1-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, isAdmin && React.createElement(\"div\", {\n    className: \"collection competition-lists-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => setIsAdminView(!isAdminView),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, isAdminView ? 'View as User' : 'View as Admin'))), isStarted && React.createElement(Leaderboard, {\n    goals: competitionGoals,\n    participants: competitionParticipants,\n    type: type,\n    isMax: competition.isMax,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), (isAdminView || !isStarted) && React.createElement(Participants, {\n    participants: competitionParticipants,\n    isAdmin: isAdmin,\n    compId: competition._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), isAdminView && !isStarted && React.createElement(InviteTable, {\n    participants: competitionParticipants,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(CompetitionTable, {\n    isAdmin: isAdmin,\n    isAdminView: isAdminView,\n    isStarted: isStarted,\n    isActive: time < duration,\n    isComplete: isComplete,\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }))));\n};\n\nexport default CompetitionPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js"],"names":["React","useContext","useState","useEffect","GoalContext","CompetitionContext","AlertContext","AuthContext","Leaderboard","Participants","InviteTable","moment","CompetitionTable","CompetitionPage","props","goalCurrent","startDate","duration","type","setAlert","clearAlert","getCompetitionGoals","getCompetitionParticipants","competition","competitionGoals","competitionParticipants","competitionError","user","isAdmin","setIsAdmin","isAdminView","setIsAdminView","competitionArray","length","map","goal","tracker","count","i","temp","filter","value","pop","find","_id","name","alias","firstName","trackerValues","splice","time","console","log","Object","entries","adminIds","includes","startOf","diff","timeHours","isStarted","isComplete","isMax"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA,sBACoBb,UAAU,CAACG,WAAD,CAD9B;AAAA,4CACzBW,WADyB;AAAA,QACXC,SADW,yBACXA,SADW;AAAA,QACAC,QADA,yBACAA,QADA;AAAA,QACUC,IADV,yBACUA,IADV;;AAAA,uBAGAjB,UAAU,CAACK,YAAD,CAHV;AAAA,QAGzBa,QAHyB,gBAGzBA,QAHyB;AAAA,QAGfC,UAHe,gBAGfA,UAHe;;AAAA,uBAY7BnB,UAAU,CAACI,kBAAD,CAZmB;AAAA,QAM/BgB,mBAN+B,gBAM/BA,mBAN+B;AAAA,QAO/BC,0BAP+B,gBAO/BA,0BAP+B;AAAA,QAQ/BC,WAR+B,gBAQ/BA,WAR+B;AAAA,QAS/BC,gBAT+B,gBAS/BA,gBAT+B;AAAA,QAU/BC,uBAV+B,gBAU/BA,uBAV+B;AAAA,QAW/BC,gBAX+B,gBAW/BA,gBAX+B;;AAAA,uBAchBzB,UAAU,CAACM,WAAD,CAdM;AAAA,QAczBoB,IAdyB,gBAczBA,IAdyB;;AAAA,oBAgBHzB,QAAQ,CAAC,KAAD,CAhBL;AAAA;AAAA,QAgB1B0B,OAhB0B;AAAA,QAgBjBC,UAhBiB;;AAAA,qBAiBK3B,QAAQ,CAAC,KAAD,CAjBb;AAAA;AAAA,QAiB1B4B,WAjB0B;AAAA,QAiBbC,cAjBa,kBAmBjC;;;AACA,MAAIC,gBAAgB,GAAG,EAAvB;;AAEA,MAAGP,uBAAuB,CAACQ,MAAxB,KAAmC,CAAnC,IAAwCT,gBAAgB,CAACS,MAAjB,KAA4B,CAAvE,EAA0E;AACxED,IAAAA,gBAAgB,GAAGR,gBAAgB,CAACU,GAAjB,CAAqBC,IAAI,IAAI;AAC9C;AAD8C,YAEvCC,OAFuC,GAE5BD,IAF4B,CAEvCC,OAFuC;AAG9C,UAAIC,KAAK,GAAG,CAAZ;;AACA,UAAInB,IAAI,KAAK,WAAb,EAAyB;AACvB,aAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACH,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACvC,cAAIF,OAAO,CAACE,CAAD,CAAX,EAAgBD,KAAK;AACtB;AACF,OAJD,MAKK,IAAInB,IAAI,KAAK,OAAb,EAAsB;AACzB,aAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACH,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACvCD,UAAAA,KAAK,IAAID,OAAO,CAACE,CAAD,CAAhB;AACD;AACF,OAJI,MAKA;AACH,YAAIC,IAAI,GAAGH,OAAO,CAACI,MAAR,CAAeC,KAAK,IAAIA,KAAK,KAAK,IAAlC,CAAX;AACAJ,QAAAA,KAAK,GAAGE,IAAI,CAACG,GAAL,KAAaN,OAAO,CAAC,CAAD,CAA5B;AACD;;AACD,UAAIG,IAAI,GAAGd,uBAAuB,CAACkB,IAAxB,CAA6BhB,IAAI,IAAIA,IAAI,CAACiB,GAAL,KAAaT,IAAI,CAACR,IAAvD,CAAX;AACA,UAAIkB,IAAI,GAAGN,IAAI,CAACO,KAAL,GAAaP,IAAI,CAACO,KAAlB,GAA0BP,IAAI,CAACQ,SAA1C;AAEA,UAAIC,aAAa,GAAGZ,OAAO,CAACa,MAAR,CAAeC,IAAf,CAApB;AACA,aAAO,CAACL,IAAD,EAAOR,KAAP,EAAc,GAAGW,aAAjB,CAAP;AACD,KAvBkB,CAAnB;AAwBD;;AAEDG,EAAAA,OAAO,CAACC,GAAR,CAAYpB,gBAAZ;AAIA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGuB,gBAAH,EACEP,QAAQ,CAACO,gBAAD,CAAR,CAFY,CAGd;AACD,GAJQ,EAIN,CAACA,gBAAD,CAJM,CAAT,CArDiC,CA2DjC;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXiB,MAAAA,UAAU;AACX,KAFD,CADc,CAId;AACD,GALQ,EAKN,EALM,CAAT,CA5DiC,CAmEjC;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGkD,MAAM,CAACC,OAAP,CAAe/B,WAAf,EAA4BU,MAA5B,KAAuC,CAA1C,EAA6C;AAC3CZ,MAAAA,mBAAmB,CAACE,WAAW,CAACqB,GAAb,CAAnB;AACAtB,MAAAA,0BAA0B,CAACC,WAAW,CAACqB,GAAb,CAA1B;AACA,UAAGrB,WAAW,CAACgC,QAAZ,CAAqBC,QAArB,CAA8B7B,IAAI,CAACiB,GAAnC,CAAH,EACEf,UAAU,CAAC,IAAD,CAAV;AACH,KANa,CAOd;;AACD,GARQ,EAQN,CAACN,WAAD,CARM,CAAT,CApEiC,CA8EjC;;AACA,MAAI2B,IAAI,GAAGvC,MAAM,GAAG8C,OAAT,CAAiB,KAAjB,EAAwBC,IAAxB,CAA6B1C,SAA7B,EAAwC,MAAxC,CAAX;AACA,MAAI2C,SAAS,GAAGhD,MAAM,GAAG8C,OAAT,CAAiB,KAAjB,EAAwBC,IAAxB,CAA6B1C,SAA7B,EAAwC,OAAxC,CAAhB;AACA,QAAM4C,SAAS,GAAGD,SAAS,IAAI,CAAb,GAAiB,IAAjB,GAAwB,KAA1C;AACA,MAAIT,IAAI,GAAGjC,QAAX,EACEiC,IAAI,GAAGjC,QAAP;AACF,QAAM4C,UAAU,GAAGX,IAAI,KAAKjC,QAAT,GAAoB,IAApB,GAA2B,KAA9C;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGW,OAAO,IACN;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,2BAAlB;AAA8C,IAAA,OAAO,EAAE,MAAMG,cAAc,CAAC,CAACD,WAAF,CAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,WAAW,GAAG,cAAH,GAAoB,eAApC,CADF,CADF,CAFJ,EAQG8B,SAAS,IACR,oBAAC,WAAD;AACE,IAAA,KAAK,EAAEpC,gBADT;AAEE,IAAA,YAAY,EAAEC,uBAFhB;AAGE,IAAA,IAAI,EAAEP,IAHR;AAIE,IAAA,KAAK,EAAEK,WAAW,CAACuC,KAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAgBG,CAAChC,WAAW,IAAI,CAAC8B,SAAjB,KACC,oBAAC,YAAD;AACE,IAAA,YAAY,EAAEnC,uBADhB;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,MAAM,EAAEL,WAAW,CAACqB,GAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,EAuBId,WAAW,IAAI,CAAC8B,SAAjB,IACC,oBAAC,WAAD;AACE,IAAA,YAAY,EAAEnC,uBADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBJ,CADF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAEG,OADX;AAEE,IAAA,WAAW,EAAEE,WAFf;AAGE,IAAA,SAAS,EAAE8B,SAHb;AAIE,IAAA,QAAQ,EAAEV,IAAI,GAAGjC,QAJnB;AAKE,IAAA,UAAU,EAAE4C,UALd;AAME,IAAA,IAAI,EAAEX,IANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA9BF,CADF,CADF;AA6CD,CAnID;;AAqIA,eAAerC,eAAf","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport AuthContext from '../../contexts/auth/authContext';\nimport Leaderboard from './complists/Leaderboard';\nimport Participants from './complists/Participants';\nimport InviteTable from './complists/InviteTable';\nimport moment from 'moment';\nimport CompetitionTable from './comptable/CompetitionTable';\n\nconst CompetitionPage = (props) => {\n  const { goalCurrent: {startDate, duration, type} } = useContext(GoalContext);\n  \n  const { setAlert, clearAlert } = useContext(AlertContext);\n\n  const { \n    getCompetitionGoals, \n    getCompetitionParticipants, \n    competition, \n    competitionGoals, \n    competitionParticipants,\n    competitionError\n  } = useContext(CompetitionContext);\n\n  const { user } = useContext(AuthContext);\n\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isAdminView, setIsAdminView] = useState(false);\n\n  //create array used for leaderboard and chart\n  let competitionArray = [];\n\n  if(competitionParticipants.length !== 0 && competitionGoals.length !== 0) {\n    competitionArray = competitionGoals.map(goal => {\n      //calc progress\n      const {tracker} = goal;\n      let count = 0;\n      if (type === 'pass/fail'){\n        for (let i = 0; i < tracker.length; i++) {\n          if (tracker[i]) count++;\n        }\n      }\n      else if (type === 'total') {\n        for (let i = 0; i < tracker.length; i++) {\n          count += tracker[i];\n        }\n      }\n      else {\n        let temp = tracker.filter(value => value !== null)\n        count = temp.pop() - tracker[0];\n      }\n      let temp = competitionParticipants.find(user => user._id === goal.user);\n      let name = temp.alias ? temp.alias : temp.firstName;\n\n      let trackerValues = tracker.splice(time);\n      return [name, count, ...trackerValues]\n    })\n  }\n\n  console.log(competitionArray);\n\n\n\n  useEffect(() => {\n    if(competitionError)\n      setAlert(competitionError);\n    //eslint-disable-next-line\n  }, [competitionError])\n\n  //clear alert and competition before redirect\n  useEffect(() => {\n    return () => {\n      clearAlert();\n    }\n    //eslint-disable-next-line\n  }, []);\n\n  //get competition goals and participants\n  useEffect(() => {\n    if(Object.entries(competition).length !== 0) {\n      getCompetitionGoals(competition._id);\n      getCompetitionParticipants(competition._id);\n      if(competition.adminIds.includes(user._id))\n        setIsAdmin(true);\n    }\n    //eslint-disable-next-line\n  }, [competition])\n\n  //calc time to determine which day of competition we are on\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  if (time > duration)\n    time = duration;\n  const isComplete = time === duration ? true : false;\n\n  return (\n    <div className='competition-container'>\n      <div className='grid-1-2'>\n        <div>\n          {isAdmin && \n            <div className='collection competition-lists-container'>\n              <button className='btn btn-primary btn-block' onClick={() => setIsAdminView(!isAdminView)}>\n                <h3>{isAdminView ? 'View as User' : 'View as Admin'}</h3>\n              </button>\n            </div>\n          }\n          {isStarted &&\n            <Leaderboard \n              goals={competitionGoals} \n              participants={competitionParticipants}  \n              type={type}\n              isMax={competition.isMax}\n            />\n          }\n          {(isAdminView || !isStarted) && \n            <Participants \n              participants={competitionParticipants} \n              isAdmin={isAdmin}\n              compId={competition._id}\n            />\n          }\n          {(isAdminView && !isStarted) &&\n            <InviteTable \n              participants={competitionParticipants}\n            />\n          }\n        </div>\n        <div>\n          <CompetitionTable \n            isAdmin={isAdmin}\n            isAdminView={isAdminView}\n            isStarted={isStarted}\n            isActive={time < duration}\n            isComplete={isComplete} \n            time={time}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CompetitionPage;"]},"metadata":{},"sourceType":"module"}