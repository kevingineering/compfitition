{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionTable.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport { Link } from 'react-router-dom'; // import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\n\nconst CompetitionTable = props => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent,\n        clearCurrentGoal = _useContext.clearCurrentGoal;\n\n  const _useContext2 = useContext(CompetitionContext),\n        competition = _useContext2.competition,\n        competitionGoals = _useContext2.competitionGoals,\n        competitionParticipants = _useContext2.competitionParticipants,\n        competitionError = _useContext2.competitionError,\n        deleteCompetition = _useContext2.deleteCompetition,\n        clearCompetition = _useContext2.clearCompetition;\n\n  const _useContext3 = useContext(AlertContext),\n        setAlert = _useContext3.setAlert,\n        clearAlert = _useContext3.clearAlert;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        deleteToggle = _useState2[0],\n        setDeleteToggle = _useState2[1];\n\n  const name = goalCurrent.name,\n        startDate = goalCurrent.startDate,\n        duration = goalCurrent.duration; //handleDelete\n\n  const handleDelete = async () => {\n    await deleteCompetition(competition._id);\n\n    if (competitionError) {\n      setAlert(competitionError);\n    } else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  }; // //handleSave - passed down to goal containers\n  // const handleSave = async (record) => {\n  //   await updateGoalTracker(record, _id);\n  //   if (goalsError) {\n  //     setAlert(goalsError);\n  //   }\n  //   else {\n  //     setAlert('Goal saved!');\n  //   }\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, !Object.entries(competition).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, name), time <= duration && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/competitionform\",\n    className: \"btn btn-primary btn-block center\",\n    onClick: clearAlert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Modify Competition\")), !deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => setDeleteToggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Delete Competition\")), deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"alert lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Are you sure you want to delete this competition? This will affect multiple users, and deletions cannot be undone.\"), React.createElement(\"button\", {\n    className: \"btn btn-danger btn-split\",\n    onClick: handleDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Yes\"), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-split\",\n    onClick: () => setDeleteToggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"No\"))));\n};\n\nexport default CompetitionTable;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionTable.js"],"names":["React","useContext","useState","useEffect","GoalContext","CompetitionContext","AlertContext","Link","CompetitionTable","props","goalCurrent","clearCurrentGoal","competition","competitionGoals","competitionParticipants","competitionError","deleteCompetition","clearCompetition","setAlert","clearAlert","deleteToggle","setDeleteToggle","name","startDate","duration","handleDelete","_id","history","push","Object","entries","length","time"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\n\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport { Link } from 'react-router-dom';\n// import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\n\nconst CompetitionTable = props => {\n\n  const { \n    goalCurrent, \n    clearCurrentGoal, \n  } = useContext(GoalContext);\n\n  const { \n    competition, \n    competitionGoals, \n    competitionParticipants, \n    competitionError, \n    deleteCompetition, \n    clearCompetition \n  } = useContext(CompetitionContext);\n\n  const { \n    setAlert, \n    clearAlert \n  } = useContext(AlertContext);\n\n  const [deleteToggle, setDeleteToggle] = useState(false);\n\n  const { name, startDate, duration } = goalCurrent;\n\n\n  //handleDelete\n  const handleDelete = async () => {\n    await deleteCompetition(competition._id);\n    if (competitionError) {\n      setAlert(competitionError);\n    }\n    else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  };\n\n  // //handleSave - passed down to goal containers\n  // const handleSave = async (record) => {\n  //   await updateGoalTracker(record, _id);\n  //   if (goalsError) {\n  //     setAlert(goalsError);\n  //   }\n  //   else {\n  //     setAlert('Goal saved!');\n  //   }\n  // }\n\n  return (\n    <div className='form-container'>\n      {!Object.entries(competition).length ? (\n        <h2>Loading...</h2>\n      ) : (\n        <React.Fragment>\n          <h2 className='collection-header'>{name}</h2>\n          {/* Goal Container */}\n          {/* Modify Button */}\n          {time <= duration &&\n            <React.Fragment>\n              <Link \n                to='/competitionform' \n                className='btn btn-primary btn-block center' \n                onClick={clearAlert}\n              >\n                Modify Competition\n              </Link>\n            </React.Fragment>\n          }\n          {/* Delete Button */}\n          {!deleteToggle &&\n          <React.Fragment>\n            <p className='lr-border'/>\n            <button \n              className='btn btn-primary btn-block' \n              onClick={() => setDeleteToggle(true)}\n            >\n              Delete Competition\n            </button>\n          </React.Fragment>\n        }        \n        {/*Delete module*/}\n        {deleteToggle && (\n          <React.Fragment>\n            <hr/>\n            <span className='alert lr-border'>\n              Are you sure you want to delete this competition? This will affect multiple users, and deletions cannot be undone.\n            </span>\n            <button\n              className='btn btn-danger btn-split'\n              onClick={handleDelete}\n            >Yes</button>\n            <button\n              className='btn btn-primary btn-split'\n              onClick={() => setDeleteToggle(false)}\n            >No</button>\n          </React.Fragment>\n        )}\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default CompetitionTable;"]},"metadata":{},"sourceType":"module"}