{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm05';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm05 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/mathjs/es/type/matrix/utils/algorithm05.js"],"names":["factory","DimensionError","name","dependencies","createAlgorithm05","_ref","typed","equalScalar","algorithm05","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","c","createSparseMatrix","values","index","ptr","size","datatype","xa","xb","wa","wb","i","j","k","k1","mark","push","wai","wbi","va","vb","vc","splice"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm05';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm05 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm05(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values A(:,j)\n\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k]; // push index\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop values B(:,j)\n\n\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row existed in A\n\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        } // update workspace\n\n\n        wb[i] = mark; // check we need to process values\n\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // marks\n\n          var wai = wa[i];\n          var wbi = wb[i]; // check Aij or Bij are nonzero\n\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero; // Cij\n\n            var vc = cf(va, vb); // check for zero\n\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});"]},"metadata":{},"sourceType":"module"}