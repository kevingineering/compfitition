{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalPage.js\";\nimport React, { useState, useContext } from 'react';\nimport moment from 'moment';\nimport GoalProgress from './goalPieces/GoalProgress';\nimport GoalInfo from './goalPieces/GoalInfo';\nimport GoalButtons from './goalPieces/GoalButtons';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport GoalChart from './goalPieces/GoalChart';\n\nconst GoalPage = props => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent,\n        goalsError = _useContext.goalsError,\n        updateGoalTracker = _useContext.updateGoalTracker;\n\n  const _useContext2 = useContext(AlertContext),\n        setAlert = _useContext2.setAlert;\n\n  const name = goalCurrent.name,\n        duration = goalCurrent.duration,\n        startDate = goalCurrent.startDate,\n        units = goalCurrent.units,\n        total = goalCurrent.total,\n        tracker = goalCurrent.tracker,\n        type = goalCurrent.type,\n        _id = goalCurrent._id;\n\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1];\n\n  !Object.entries(goalCurrent).length && props.history.push('/'); //decide if competition has started, is over, or what day we are on\n\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration) time = duration;\n  const isComplete = time === duration ? true : false; //calc goal value\n\n  let value = 0;\n\n  if (type === 'difference') {\n    let temp = record.filter(value => value !== null);\n    value = temp.pop() - record[0];\n  } else if (type === 'total') {\n    for (let i = 0; i < record.length; i++) {\n      value += record[i];\n    }\n  } else if (type === 'pass/fail') {\n    for (let i = 0; i < record.length; i++) {\n      if (record[i] === true) value++;\n    }\n  }\n\n  const handleSave = async record => {\n    await updateGoalTracker(record, _id);\n\n    if (goalsError) {\n      setAlert(goalsError);\n    } else {\n      setAlert('Goal saved!');\n    }\n  };\n\n  let isOwner = true;\n  return React.createElement(\"div\", {\n    className: \"form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, !Object.entries(goalCurrent).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, name), isStarted ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(GoalChart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), time !== duration && isOwner && React.createElement(GoalProgress, {\n    type: type,\n    time: time,\n    record: record,\n    setRecord: setRecord,\n    units: units,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(GoalInfo, {\n    goal: goalCurrent,\n    record: record,\n    time: time,\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }))) : React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Start: \", record[0], \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Begins \", moment.utc(startDate).format('MMM Do')))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Goal: \", total, \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Duration: \", duration, \" days\")))), React.createElement(GoalButtons, {\n    isActive: time <= duration,\n    handleSave: handleSave,\n    isOwner: isOwner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })));\n};\n\nexport default GoalPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalPage.js"],"names":["React","useState","useContext","moment","GoalProgress","GoalInfo","GoalButtons","AlertContext","GoalContext","GoalChart","GoalPage","props","goalCurrent","goalsError","updateGoalTracker","setAlert","name","duration","startDate","units","total","tracker","type","_id","record","setRecord","Object","entries","length","history","push","timeHours","startOf","diff","isStarted","time","isComplete","value","temp","filter","pop","i","handleSave","isOwner","utc","format"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport moment from 'moment';\nimport GoalProgress from './goalPieces/GoalProgress';\nimport GoalInfo from './goalPieces/GoalInfo';\nimport GoalButtons from './goalPieces/GoalButtons';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport GoalChart from './goalPieces/GoalChart';\n\nconst GoalPage = (props) => {\n  const { goalCurrent, goalsError, updateGoalTracker } = useContext(GoalContext);\n  const { setAlert } = useContext(AlertContext);\n\n  const { name, duration, startDate, units, total, tracker, type, _id } = goalCurrent;\n \n  const [record, setRecord] = useState(tracker);\n\n  !Object.entries(goalCurrent).length && props.history.push('/');\n\n  //decide if competition has started, is over, or what day we are on\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration)\n    time = duration;\n  const isComplete = time === duration ? true : false;\n\n  //calc goal value\n  let value = 0;\n  if (type === 'difference') {\n    let temp = record.filter(value => value !== null)\n    value = temp.pop() - record[0];\n  } else if (type === 'total') {\n    for (let i = 0; i < record.length; i++ ) {\n      value += record[i];\n    }\n  } else if (type === 'pass/fail') {\n    for (let i = 0; i < record.length; i++ ) {\n      if (record[i] === true) \n        value++;\n    }\n  }\n\n  const handleSave = async (record) => {\n    await updateGoalTracker(record, _id);\n    if (goalsError) {\n      setAlert(goalsError);\n    }\n    else {\n      setAlert('Goal saved!');\n    }\n  }\n  \n  let isOwner = true;\n\n  return (\n    <div className='form-container'>\n    {!Object.entries(goalCurrent).length ? (\n      <h2>Loading...</h2>\n    ) : (\n      <React.Fragment>\n        <h2 className='collection-header'>{name}</h2>\n        {isStarted ? (\n          <React.Fragment>\n            <ul>\n              <GoalChart />\n              {time !== duration && isOwner && \n                <GoalProgress \n                  type={type}\n                  time={time}\n                  record={record}\n                  setRecord={setRecord}\n                  units={units}\n                />\n              }\n              <GoalInfo \n                goal={goalCurrent}\n                record={record}\n                time={time}\n                value={value}\n              />\n            </ul>\n          </React.Fragment>\n        ) : (\n          <ul>\n            {/* Info */}\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  Start: {record[0]} {units}\n                </span>\n                <span className='right'>\n                  Begins {moment.utc(startDate).format('MMM Do')}\n                </span>\n              </div>\n            </li>\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  Goal: {total} {units}\n                </span>\n                <span className='right'>\n                  Duration: {duration} days\n                </span>\n              </div>\n            </li>\n          </ul>\n        )}\n        <GoalButtons \n          isActive={time <= duration} \n          handleSave={handleSave}\n          isOwner={isOwner}\n        />\n      </React.Fragment>\n    )}\n    </div>\n  )\n};\n\nexport default GoalPage;"]},"metadata":{},"sourceType":"module"}