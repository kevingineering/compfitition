{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalPassFail.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport moment from 'moment';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\n\nconst GoalPassFail = ({\n  handleSave,\n  current: {\n    duration,\n    startDate,\n    total,\n    compId,\n    tracker,\n    completed\n  }\n}) => {\n  const alertContext = useContext(AlertContext);\n  const setAlert = alertContext.setAlert,\n        clearAlerts = alertContext.clearAlerts;\n\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1];\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let isComplete = false;\n\n  if (time > duration) {\n    time = duration;\n    isComplete = true;\n  }\n\n  useEffect(() => {\n    setRecord(record.map((value, index) => {\n      if (index < time && value === null) {\n        value = false;\n      }\n\n      return value;\n    })); //eslint-disable-next-line\n  }, []);\n  let success = 0;\n\n  for (let i = 0; i < record.length; i++) {\n    if (record[i] === true) success++;\n  }\n\n  let toDatePercentage = round(success / (time + 1) * 100);\n  let totalPercentage = round(success / record.length * 100); //event.target will get the icon and fail, but event.currentTarget will get the button every time\n\n  const handleClick = e => {\n    if (isComplete) {\n      return null;\n    }\n\n    let clickLoc = parseInt(e.currentTarget.name);\n\n    if (time < clickLoc) {\n      setAlert(\"You can't record the future.\");\n      setTimeout(() => {\n        clearAlerts();\n      }, 2000);\n    } else setRecord(record.map((value, index) => {\n      if (index === clickLoc) {\n        if (value === null || value === false) {\n          value = true;\n        } else value = false;\n      }\n\n      return value;\n    }));\n  };\n\n  const table = () => {\n    let list = [];\n\n    for (let i = 0; i < duration / 7; i++) {\n      list.push(React.createElement(\"span\", {\n        className: \"table-row\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"table-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Week \", i + 1, React.createElement(\"span\", {\n        className: \"hide-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, '', \" - \", moment.utc(startDate).add(7 * i, 'day').format('MMM Do'))), React.createElement(\"span\", {\n        className: \"table-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, buttons(i))));\n    }\n\n    return list;\n  };\n\n  const buttons = week => {\n    let list = [];\n\n    for (let i = 0; i < total; i++) {\n      let loc = week * total + i;\n      list.push(React.createElement(\"button\", {\n        className: `table-btn ${time === loc && 'table-btn-today'}`,\n        onClick: handleClick,\n        key: loc,\n        name: loc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, record[loc] && React.createElement(\"i\", {\n        className: \"fas fa-check success-color\",\n        name: loc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), !record[loc] && record[loc] !== null && React.createElement(\"i\", {\n        className: \"fas fa-times danger-color\",\n        name: loc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), record[loc] === null && ' '));\n    }\n\n    return list;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, table()), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Start Date: \", moment.utc(startDate).format('MMMM Do, YYYY')), !isComplete && React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Success To Date: \", success, \" / \", time > duration ? record.length : time + 1, \" (\", toDatePercentage, \"%)\"), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Success Total: \", success, \" / \", record.length, \" (\", totalPercentage, \"%)\")), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => handleSave(record),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Save Goal\"));\n};\n\nGoalPassFail.propTypes = {\n  handleSave: PropTypes.func.isRequired,\n  current: PropTypes.object.isRequired\n};\nexport default GoalPassFail;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalPassFail.js"],"names":["React","useState","useContext","useEffect","moment","AlertContext","round","PropTypes","GoalPassFail","handleSave","current","duration","startDate","total","compId","tracker","completed","alertContext","setAlert","clearAlerts","record","setRecord","time","startOf","diff","isComplete","map","value","index","success","i","length","toDatePercentage","totalPercentage","handleClick","e","clickLoc","parseInt","currentTarget","name","setTimeout","table","list","push","utc","add","format","buttons","week","loc","propTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport moment from 'moment';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\n\nconst GoalPassFail = ({handleSave, current: { duration, startDate, total, compId, tracker, completed }}) => {\n  const alertContext = useContext(AlertContext);\n  const {setAlert, clearAlerts} = alertContext;\n\n  const [record, setRecord] = useState(tracker);\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let isComplete = false;\n  if (time > duration) {\n    time = duration;\n    isComplete = true;\n  }\n\n  useEffect(() => {\n    setRecord(record.map((value, index) => {\n      if (index < time && value === null) {\n        value = false;\n      }\n      return value;\n    }));\n    //eslint-disable-next-line\n  }, []);\n\n  let success = 0;\n\n  for (let i = 0; i < record.length; i++ ) {\n    if (record[i] === true) \n      success++;\n  }\n\n  let toDatePercentage = round(success / (time + 1) * 100);\n  let totalPercentage = round(success / record.length * 100);\n\n  //event.target will get the icon and fail, but event.currentTarget will get the button every time\n  const handleClick = e => {\n    if (isComplete) {\n      return null;\n    }\n    let clickLoc = parseInt(e.currentTarget.name);\n    if (time < clickLoc) {\n      setAlert(\"You can't record the future.\");\n      setTimeout(() => {\n        clearAlerts();\n      }, 2000);\n    }\n    else setRecord(record.map((value, index) => {\n      if (index === clickLoc) {\n        if (value === null || value === false) {\n          value = true;\n        }\n        else value = false;\n      }\n      return value;\n    }))\n  };\n\n  const table = () => {\n    let list = [];\n    for(let i = 0; i < duration / 7; i++) {\n      list.push(\n        <span className='table-row' key={i}>\n          <h3 className='table-label'>Week {i + 1}\n            <span className='hide-sm'>\n              {''} - {moment.utc(startDate).add(7 * i, 'day').format('MMM Do')}\n            </span>\n          </h3>\n          <span className='table-buttons'>\n            {buttons(i)}\n          </span>\n        </span>);\n    }\n    return list;\n  };\n\n  const buttons = week => {\n    let list = [];\n    for(let i = 0; i < total; i++) {\n      let loc = week * total + i;\n      list.push(\n        <button \n          className={`table-btn ${time === loc && 'table-btn-today'}`}\n          onClick={handleClick} \n          key={loc} \n          name={loc} \n        >\n          {record[loc] && <i className='fas fa-check success-color' name={loc}/>}\n          {!record[loc] && record[loc] !== null && <i className='fas fa-times danger-color' name={loc}/>}\n          {record[loc] === null && ' '}\n        </button>\n      )\n    }\n    return list;\n  };\n\n  return (\n    <React.Fragment>\n      <ul>\n        <li>\n          {table()}\n        </li>\n        <li className='table-info lr-border'>\n          Start Date: {moment.utc(startDate).format('MMMM Do, YYYY')}\n        </li>\n        {!isComplete &&\n          <li className='table-info lr-border'>\n            Success To Date: {success} / {time > duration ? record.length : time + 1} ({toDatePercentage}%)\n          </li>\n        }\n        <li className='table-info lr-border'>\n          Success Total: {success} / {record.length} ({totalPercentage}%)\n        </li>\n      </ul>\n      <button className='btn btn-primary btn-block' onClick={() => handleSave(record)}>\n        Save Goal\n      </button>\n    </React.Fragment>\n  );\n};\n\nGoalPassFail.propTypes = {\n  handleSave: PropTypes.func.isRequired,\n  current: PropTypes.object.isRequired\n}\n\nexport default GoalPassFail;"]},"metadata":{},"sourceType":"module"}