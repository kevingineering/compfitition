{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext'; // import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\n\nimport moment from 'moment';\n\nconst CompetitionPage = props => {\n  const goalContext = useContext(GoalContext);\n  const goalCurrent = goalContext.goalCurrent,\n        clearCurrentGoal = goalContext.clearCurrentGoal,\n        goalsError = goalContext.goalsError,\n        updateGoalTracker = goalContext.updateGoalTracker;\n  const alertContext = useContext(AlertContext);\n  const setAlert = alertContext.setAlert,\n        clearAlert = alertContext.clearAlert;\n  const competitionContext = useContext(CompetitionContext);\n  const getCompetition = competitionContext.getCompetition,\n        getCompetitionGoals = competitionContext.getCompetitionGoals,\n        competition = competitionContext.competition,\n        competitionLoading = competitionContext.competitionLoading,\n        competitionError = competitionContext.competitionError,\n        deleteCompetition = competitionContext.deleteCompetition,\n        clearCompetition = competitionContext.clearCompetition;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        deleteToggle = _useState2[0],\n        setDeleteToggle = _useState2[1];\n\n  const name = goalCurrent.name,\n        type = goalCurrent.type,\n        startDate = goalCurrent.startDate,\n        duration = goalCurrent.duration,\n        compId = goalCurrent.compId;\n  const _id = competition._id,\n        goalId = competition.goalId,\n        adminIds = competition.adminIds,\n        isMax = competition.isMax; //redirect if goalCurrent is empty - goalCurrent is set when competition item is clicked\n\n  !Object.entries(goalCurrent).length && props.history.push('/'); //get competition with goal current\n\n  useEffect(() => {\n    if (goalCurrent.compId !== null) getCompetition(compId); //eslint-disable-next-line\n  }, [goalCurrent]); //get competition goals if competition changes\n\n  useEffect(() => {\n    if (Object.entries(competition).length !== 0) getCompetitionGoals(compId); //eslint-disable-next-line\n  }, [competition]); //calc time to determine which day of competition we are on\n\n  let time = moment().startOf('day').diff(startDate, 'days'); //handleDelete\n\n  const handleDelete = async () => {\n    await deleteCompetition(_id);\n\n    if (competitionError) {\n      setAlert(competitionError);\n    } else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  }; // //handleSave - passed down to goal containers\n  // const handleSave = async (record) => {\n  //   await updateGoalTracker(record, _id);\n  //   if (goalsError) {\n  //     setAlert(goalsError);\n  //   }\n  //   else {\n  //     setAlert('Goal saved!');\n  //   }\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, !Object.entries(competition).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, name), time <= duration && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/competitionform\",\n    className: \"btn btn-primary btn-block center\",\n    onClick: clearAlert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Modify Goal\"), React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), !deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => setDeleteToggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Delete Goal\")), deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"alert lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Are you sure you want to delete this goal? Deletions cannot be undone.\"), React.createElement(\"button\", {\n    className: \"btn btn-danger btn-split\",\n    onClick: handleDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Yes\"), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-split\",\n    onClick: () => setDeleteToggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"No\"))));\n};\n\nexport default CompetitionPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js"],"names":["React","useContext","useState","useEffect","Link","GoalContext","AlertContext","CompetitionContext","moment","CompetitionPage","props","goalContext","goalCurrent","clearCurrentGoal","goalsError","updateGoalTracker","alertContext","setAlert","clearAlert","competitionContext","getCompetition","getCompetitionGoals","competition","competitionLoading","competitionError","deleteCompetition","clearCompetition","deleteToggle","setDeleteToggle","name","type","startDate","duration","compId","_id","goalId","adminIds","isMax","Object","entries","length","history","push","time","startOf","diff","handleDelete"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\n// import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\nimport moment from 'moment';\n\nconst CompetitionPage = props => {\n  const goalContext = useContext(GoalContext);\n  const { goalCurrent, clearCurrentGoal, goalsError, updateGoalTracker } = goalContext;\n\n  const alertContext = useContext(AlertContext);\n  const { setAlert, clearAlert } = alertContext;\n\n  const competitionContext = useContext(CompetitionContext);\n  const { getCompetition, getCompetitionGoals, competition, competitionLoading, competitionError, deleteCompetition, clearCompetition } = competitionContext;\n\n  const [deleteToggle, setDeleteToggle] = useState(false);\n\n  const { name, type, startDate, duration, compId } = goalCurrent;\n  const { _id, goalId, adminIds, isMax } = competition;\n\n  //redirect if goalCurrent is empty - goalCurrent is set when competition item is clicked\n  !Object.entries(goalCurrent).length && props.history.push('/');\n\n  //get competition with goal current\n  useEffect(() => {\n    if (goalCurrent.compId !== null)\n      getCompetition(compId);\n    //eslint-disable-next-line\n  }, [goalCurrent])\n\n  //get competition goals if competition changes\n  useEffect(() => {\n    if(Object.entries(competition).length !== 0)\n      getCompetitionGoals(compId);\n    //eslint-disable-next-line\n  }, [competition])\n\n  //calc time to determine which day of competition we are on\n  let time = moment().startOf('day').diff(startDate, 'days');\n  \n  //handleDelete\n  const handleDelete = async () => {\n    await deleteCompetition(_id);\n    if (competitionError) {\n      setAlert(competitionError);\n    }\n    else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  };\n\n  // //handleSave - passed down to goal containers\n  // const handleSave = async (record) => {\n  //   await updateGoalTracker(record, _id);\n  //   if (goalsError) {\n  //     setAlert(goalsError);\n  //   }\n  //   else {\n  //     setAlert('Goal saved!');\n  //   }\n  // }\n\n  return (\n    <div className='form-container'>\n      {!Object.entries(competition).length ? (\n        <h2>Loading...</h2>\n      ) : (\n        <React.Fragment>\n          <h2 className='collection-header'>{name}</h2>\n          {/* Goal Container */}\n          {/* Modify Button */}\n          {time <= duration &&\n            <React.Fragment>\n              <Link \n                to='/competitionform' \n                className='btn btn-primary btn-block center' \n                onClick={clearAlert}\n              >\n                Modify Goal\n              </Link>\n              <p className='lr-border'/>\n            </React.Fragment>\n          }\n          {/* Delete Button */}\n          {!deleteToggle &&\n          <React.Fragment>\n            <button \n              className='btn btn-primary btn-block' \n              onClick={() => setDeleteToggle(true)}\n            >\n              Delete Goal\n            </button>\n          </React.Fragment>\n        }        \n        {/*Delete module*/}\n        {deleteToggle && (\n          <React.Fragment>\n            <hr/>\n            <span className='alert lr-border'>\n              Are you sure you want to delete this goal? Deletions cannot be undone.\n            </span>\n            <button\n              className='btn btn-danger btn-split'\n              onClick={handleDelete}\n            >Yes</button>\n            <button\n              className='btn btn-primary btn-split'\n              onClick={() => setDeleteToggle(false)}\n            >No</button>\n          </React.Fragment>\n        )}\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default CompetitionPage;"]},"metadata":{},"sourceType":"module"}