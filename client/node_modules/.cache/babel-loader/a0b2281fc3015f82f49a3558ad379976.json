{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalDifference.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartDifference from './GoalChartDifference';\nimport { round } from 'mathjs';\n\nconst GoalDifference = ({\n  handleSave,\n  current: {\n    duration,\n    startDate,\n    units,\n    total,\n    compId,\n    tracker\n  }\n}) => {\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1]; //calc time since goal started\n\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration) time = duration; //state for controlled variables\n\n  const _useState3 = useState(record[time]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        today = _useState4[0],\n        setToday = _useState4[1];\n\n  if (today === null) setToday(''); //calc change to date\n\n  let temp = record.filter(value => value !== null);\n  let count = temp.pop() - record[0];\n  let progress = `Change: ${count > 0 ? '+' : ''}${count} ${units}`; //if value is less than zero, null, if value is empty ('') do not record, otherwise set value in array\n\n  const handleChange = e => {\n    if (e.target.value < 0) return null;else {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time) {\n          if (e.target.value === '') return null;\n          value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(GoalChartDifference, {\n    duration: duration,\n    units: units,\n    total: total,\n    record: record,\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Record Your Progress\")), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Today:\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"center\",\n    id: \"chart-input\",\n    type: \"number\",\n    value: today,\n    name: \"today\",\n    onChange: handleChange,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), units)), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, progress), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Day: \", time + 1, \" / \", duration))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"You are \", round(count / (total - record[0]) * 100), \"% of the way towards your goal.\")), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => handleSave(record),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Save Goal\"));\n};\n\nexport default GoalDifference;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalDifference.js"],"names":["React","useState","moment","GoalChartDifference","round","GoalDifference","handleSave","current","duration","startDate","units","total","compId","tracker","record","setRecord","time","startOf","diff","today","setToday","temp","filter","value","count","pop","progress","handleChange","e","target","map","index","parseFloat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartDifference from './GoalChartDifference';\nimport { round } from 'mathjs';\n\nconst GoalDifference = ({handleSave, current: { duration, startDate, units, total, compId, tracker }}) => {\n  const [record, setRecord] = useState(tracker);\n\n  //calc time since goal started\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration)\n    time = duration;\n\n  //state for controlled variables\n  const [today, setToday] = useState(record[time]);\n  if (today === null) setToday('');\n\n  //calc change to date\n  let temp = record.filter(value => value !== null)\n  let count = temp.pop() - record[0];\n  let progress = `Change: ${count > 0 ? '+' : ''}${count} ${units}`\n\n  //if value is less than zero, null, if value is empty ('') do not record, otherwise set value in array\n  const handleChange = e => {\n    if (e.target.value < 0)\n      return null;\n    else {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time) {\n          if (e.target.value === '')\n            return null;\n          value = parseFloat(e.target.value);\n        }\n        return value;\n      }));\n    } \n  }\n\n  return (\n    <React.Fragment>\n      <ul>\n        <GoalChartDifference duration={duration} units={units} total={total} record={record} time={time}/>\n        <li className='table-info lr-border center'>\n          <strong>Record Your Progress</strong>\n        </li>\n        <li className='table-info lr-border center'>\n          <span>\n            Today: \n          </span>\n          <span>\n            <input \n              className='center'\n              id='chart-input'\n              type='number' \n              value={today} \n              name='today' \n              onChange={handleChange}\n              min='0'\n            />\n            {units}\n          </span>\n        </li>\n        <hr/>\n        <li className='table-info lr-border'>\n          <div className='space-between'>\n            <span>\n              {progress}\n            </span>\n            <span>\n              Day: {time + 1} / {duration}\n            </span>\n          </div>\n        </li>\n        <li className='table-info lr-border'>You are {round(count / (total - record[0]) * 100)}% of the way towards your goal.</li>\n      </ul>\n      <button className='btn btn-primary btn-block' onClick={() => handleSave(record)}>\n        Save Goal\n      </button>\n    </React.Fragment>\n  )\n}\n\nexport default GoalDifference;"]},"metadata":{},"sourceType":"module"}