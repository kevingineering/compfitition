{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/goalPieces/GoalButtons.js\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst GoalButtons = ({\n  isActive\n}) => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent,\n        clearCurrentGoal = _useContext.clearCurrentGoal,\n        goalsError = _useContext.goalsError,\n        deleteGoal = _useContext.deleteGoal;\n\n  const _useContext2 = useContext(AlertContext),\n        setAlert = _useContext2.setAlert,\n        clearAlert = _useContext2.clearAlert;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        deleteToggle = _useState2[0],\n        setDeleteToggle = _useState2[1]; //clearAlert()\n\n\n  const handleDelete = async () => {\n    await deleteGoal(goalCurrent._id);\n\n    if (goalsError) {\n      setAlert(goalsError);\n    } else {\n      setAlert('Goal deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, isActive && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/goalform\",\n    className: \"btn btn-primary btn-block center\",\n    onClick: clearAlert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Modify Goal\")), !deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => setDeleteToggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Delete Goal\")), deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"alert lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Are you sure you want to delete this goal? Deletions cannot be undone.\"), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-split\",\n    onClick: () => setDeleteToggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"No\"), React.createElement(\"button\", {\n    className: \"btn btn-danger btn-split\",\n    onClick: () => handleDelete(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Yes\")));\n};\n\nexport default GoalButtons;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/goalPieces/GoalButtons.js"],"names":["React","useState","Link","GoalButtons","isActive","useContext","GoalContext","goalCurrent","clearCurrentGoal","goalsError","deleteGoal","AlertContext","setAlert","clearAlert","deleteToggle","setDeleteToggle","handleDelete","_id","props","history","push"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA,sBAO9BC,UAAU,CAACC,WAAD,CAPoB;AAAA,QAGhCC,WAHgC,eAGhCA,WAHgC;AAAA,QAIhCC,gBAJgC,eAIhCA,gBAJgC;AAAA,QAKhCC,UALgC,eAKhCA,UALgC;AAAA,QAMhCC,UANgC,eAMhCA,UANgC;;AAAA,uBASDL,UAAU,CAACM,YAAD,CATT;AAAA,QAS1BC,QAT0B,gBAS1BA,QAT0B;AAAA,QAShBC,UATgB,gBAShBA,UATgB;;AAAA,oBAWMZ,QAAQ,CAAC,KAAD,CAXd;AAAA;AAAA,QAW3Ba,YAX2B;AAAA,QAWbC,eAXa,kBAalC;;;AAEA,QAAMC,YAAY,GAAG,YAAY;AAC/B,UAAMN,UAAU,CAACH,WAAW,CAACU,GAAb,CAAhB;;AACA,QAAIR,UAAJ,EAAgB;AACdG,MAAAA,QAAQ,CAACH,UAAD,CAAR;AACD,KAFD,MAGK;AACHG,MAAAA,QAAQ,CAAC,eAAD,EAAkB,IAAlB,CAAR;AACAM,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACAZ,MAAAA,gBAAgB;AACjB;AACF,GAVD;;AAYA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIJ,QAAQ,IACR,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,EAAE,EAAC,WADL;AAEE,IAAA,SAAS,EAAC,kCAFZ;AAGE,IAAA,OAAO,EAAES,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAHJ,EAcG,CAACC,YAAD,IACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,SAAS,EAAC,2BADZ;AAEE,IAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,IAAD,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CAfJ,EA0BGD,YAAY,IACX,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAFF,EAKE;AACE,IAAA,SAAS,EAAC,2BADZ;AAEE,IAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,KAAD,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,EASE;AACE,IAAA,SAAS,EAAC,0BADZ;AAEE,IAAA,OAAO,EAAE,MAAMC,YAAY,EAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WATF,CA3BJ,CADF;AA6CD,CAxED;;AA0EA,eAAeb,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst GoalButtons = ({isActive}) => {\n\n  const { \n    goalCurrent, \n    clearCurrentGoal, \n    goalsError, \n    deleteGoal, \n  } = useContext(GoalContext);\n\n  const { setAlert, clearAlert } = useContext(AlertContext);\n\n  const [deleteToggle, setDeleteToggle] = useState(false);\n\n  //clearAlert()\n\n  const handleDelete = async () => {\n    await deleteGoal(goalCurrent._id);\n    if (goalsError) {\n      setAlert(goalsError);\n    }\n    else {\n      setAlert('Goal deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {/* Modify Button */}\n      { isActive &&\n        <React.Fragment>\n          <Link \n            to='/goalform' \n            className='btn btn-primary btn-block center' \n            onClick={clearAlert}\n          >\n            Modify Goal\n          </Link>\n        </React.Fragment>\n      }\n      {/* Delete Button */}\n      {!deleteToggle &&\n        <React.Fragment>\n          <p className='lr-border'/>\n          <button \n            className='btn btn-primary btn-block' \n            onClick={() => setDeleteToggle(true)}\n          >\n            Delete Goal\n          </button>\n        </React.Fragment>\n      }\n      {/*Delete module*/}\n      {deleteToggle && (\n        <React.Fragment>\n          <hr/>\n          <span className='alert lr-border'>\n            Are you sure you want to delete this goal? Deletions cannot be undone.\n          </span>\n          <button\n            className='btn btn-primary btn-split'\n            onClick={() => setDeleteToggle(false)}\n          >No</button>\n          <button\n            className='btn btn-danger btn-split'\n            onClick={() => handleDelete()}\n          >Yes</button>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default GoalButtons;"]},"metadata":{},"sourceType":"module"}