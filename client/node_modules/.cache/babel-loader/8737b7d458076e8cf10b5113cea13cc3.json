{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/page/GoalPage.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport moment from 'moment';\nimport GoalProgress from './GoalProgress';\nimport GoalInfo from './GoalInfo';\nimport GoalButtons from './GoalButtons';\nimport AlertContext from '../../../contexts/alerts/alertContext';\nimport GoalContext from '../../../contexts/goals/goalContext';\nimport GoalChart from './GoalChart';\n\nconst GoalPage = props => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent,\n        goalsError = _useContext.goalsError,\n        updateGoalTracker = _useContext.updateGoalTracker;\n\n  const _useContext2 = useContext(AlertContext),\n        setAlert = _useContext2.setAlert,\n        clearAlert = _useContext2.clearAlert;\n\n  const name = goalCurrent.name,\n        duration = goalCurrent.duration,\n        startDate = goalCurrent.startDate,\n        units = goalCurrent.units,\n        tracker = goalCurrent.tracker,\n        type = goalCurrent.type,\n        _id = goalCurrent._id;\n\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1];\n\n  !Object.entries(goalCurrent).length && props.history.push('/'); //clear alert before redirect\n\n  useEffect(() => {\n    return () => {\n      clearAlert();\n    }; //eslint-disable-next-line\n  }, []); //fill missed past values in tracker array\n\n  useEffect(() => {\n    if (type === 'pass/fail') {\n      setRecord(record.map((value, index) => {\n        if (index < time && value === null) {\n          value = false;\n        }\n\n        return value;\n      }));\n    } //eslint-disable-next-line\n\n  }, []); //decide if competition has started, is over, or what day we are on\n\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration) time = duration;\n  const isComplete = time === duration ? true : false; //calc goal value\n\n  let value = 0;\n\n  if (type === 'difference') {\n    let temp = record.filter(value => value !== null);\n    value = temp.pop() - record[0];\n  } else if (type === 'total') {\n    for (let i = 0; i < record.length; i++) {\n      value += record[i];\n    }\n  } else if (type === 'pass/fail') {\n    for (let i = 0; i < record.length; i++) {\n      if (record[i] === true) value++;\n    }\n  }\n\n  const handleSave = async record => {\n    await updateGoalTracker(record, _id);\n\n    if (goalsError) {\n      setAlert(goalsError);\n    } else {\n      setAlert('Goal saved!');\n    }\n  };\n\n  let isOwner = true;\n  return React.createElement(\"div\", {\n    className: \"form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, !Object.entries(goalCurrent).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, isStarted && React.createElement(GoalChart, {\n    goal: goalCurrent,\n    record: record,\n    setRecord: setRecord,\n    time: time,\n    isComplete: isComplete,\n    isOwner: isOwner,\n    isStarted: isStarted,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), isStarted && !isComplete && type !== 'pass/fail' && React.createElement(GoalProgress, {\n    type: type,\n    time: time,\n    record: record,\n    setRecord: setRecord,\n    units: units,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(GoalInfo, {\n    goal: goalCurrent,\n    record: record,\n    time: time,\n    value: value,\n    isStarted: isStarted,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(GoalButtons, {\n    isStarted: isStarted,\n    isActive: time < duration,\n    isOwner: isOwner,\n    handleSave: handleSave,\n    record: record,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n};\n\nexport default GoalPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/page/GoalPage.js"],"names":["React","useState","useContext","useEffect","moment","GoalProgress","GoalInfo","GoalButtons","AlertContext","GoalContext","GoalChart","GoalPage","props","goalCurrent","goalsError","updateGoalTracker","setAlert","clearAlert","name","duration","startDate","units","tracker","type","_id","record","setRecord","Object","entries","length","history","push","map","value","index","time","timeHours","startOf","diff","isStarted","isComplete","temp","filter","pop","i","handleSave","isOwner"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport moment from 'moment';\nimport GoalProgress from './GoalProgress';\nimport GoalInfo from './GoalInfo';\nimport GoalButtons from './GoalButtons';\nimport AlertContext from '../../../contexts/alerts/alertContext';\nimport GoalContext from '../../../contexts/goals/goalContext';\nimport GoalChart from './GoalChart';\n\nconst GoalPage = (props) => {\n  const { goalCurrent, goalsError, updateGoalTracker } = useContext(GoalContext);\n  const { setAlert, clearAlert } = useContext(AlertContext);\n\n  const { name, duration, startDate, units, tracker, type, _id } = goalCurrent;\n \n  const [record, setRecord] = useState(tracker);\n\n  !Object.entries(goalCurrent).length && props.history.push('/');\n\n  //clear alert before redirect\n  useEffect(() => {\n    return () => {\n      clearAlert();\n    }\n    //eslint-disable-next-line\n  }, []);\n\n  //fill missed past values in tracker array\n  useEffect(() => {\n    if (type === 'pass/fail') {\n      setRecord(record.map((value, index) => {\n        if (index < time && value === null) {\n          value = false;\n        }\n        return value;\n      }));\n    }\n    //eslint-disable-next-line\n  }, []);\n\n  //decide if competition has started, is over, or what day we are on\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration)\n    time = duration;\n  const isComplete = time === duration ? true : false;\n\n  //calc goal value\n  let value = 0;\n  if (type === 'difference') {\n    let temp = record.filter(value => value !== null)\n    value = temp.pop() - record[0];\n  } else if (type === 'total') {\n    for (let i = 0; i < record.length; i++ ) {\n      value += record[i];\n    }\n  } else if (type === 'pass/fail') {\n    for (let i = 0; i < record.length; i++ ) {\n      if (record[i] === true) \n        value++;\n    }\n  }\n\n  const handleSave = async (record) => {\n    await updateGoalTracker(record, _id);\n    if (goalsError) {\n      setAlert(goalsError);\n    }\n    else {\n      setAlert('Goal saved!');\n    }\n  }\n  \n  let isOwner = true;\n\n  return (\n    <div className='form-container'>\n    {!Object.entries(goalCurrent).length ? (\n      <h2>Loading...</h2>\n    ) : (\n      <React.Fragment>\n        <h2 className='collection-header'>{name}</h2>\n        <ul>\n          {isStarted && \n            <GoalChart \n              goal={goalCurrent}\n              record={record}\n              setRecord={setRecord} \n              time={time}\n              isComplete={isComplete}\n              isOwner={isOwner}\n              isStarted={isStarted}\n            />\n          }\n          {isStarted && !isComplete && type !== 'pass/fail' &&\n            <GoalProgress \n              type={type}\n              time={time}\n              record={record}\n              setRecord={setRecord}\n              units={units}\n            />\n          }\n          <GoalInfo \n            goal={goalCurrent}\n            record={record}\n            time={time}\n            value={value}\n            isStarted={isStarted}\n          />\n        </ul>\n        <GoalButtons \n          isStarted={isStarted}\n          isActive={time < duration} \n          isOwner={isOwner}\n          handleSave={handleSave}\n          record={record}\n        />\n      </React.Fragment>\n    )}\n    </div>\n  )\n};\n\nexport default GoalPage;"]},"metadata":{},"sourceType":"module"}