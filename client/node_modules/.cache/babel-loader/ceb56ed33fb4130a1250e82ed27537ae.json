{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalTotal.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartTotal from './GoalChartTotal';\nimport { round } from 'mathjs';\n\nconst GoalTotal = ({\n  handleSave,\n  current: {\n    duration,\n    startDate,\n    units,\n    total,\n    compId,\n    tracker\n  }\n}) => {\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1]; //calc progress so far\n\n\n  let runningTotal = 0;\n\n  for (let i = 0; i < record.length; i++) {\n    runningTotal += record[i];\n  } //calc time since goal started\n\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration) time = duration; //state for controlled variables\n\n  const _useState3 = useState(record[time]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        today = _useState4[0],\n        setToday = _useState4[1];\n\n  const _useState5 = useState(record[time - 1]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        yesterday = _useState6[0],\n        setYesterday = _useState6[1]; //if value is less than zero, null, if value is empty ('') set zero in array, otherwise set value in array\n\n\n  const handleChange = e => {\n    if (e.target.value < 0) return null;\n\n    if (e.target.name === 'today') {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time) {\n          if (e.target.value === '') value = 0;else value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    } else {\n      setYesterday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time - 1) {\n          if (e.target.value === '') value = 0;else value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(GoalChartTotal, {\n    units: units,\n    record: record,\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Record Your Progress\")), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Today: \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"center\",\n    id: \"chart-input\",\n    type: \"number\",\n    value: today,\n    name: \"today\",\n    onChange: handleChange,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), units)), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Yesterday: \\xA0\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"center\",\n    id: \"chart-input\",\n    type: \"number\",\n    value: yesterday,\n    name: \"yesterday\",\n    onChange: handleChange,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), units)), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Total: \", runningTotal, \" / \", total, \" \", units), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Day: \", time + 1, \" / \", duration))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"You are \", round(runningTotal / total * 100), \"% finished with your goal.\")), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => handleSave(record),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Save Goal\"));\n};\n\nexport default GoalTotal;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalTotal.js"],"names":["React","useState","moment","GoalChartTotal","round","GoalTotal","handleSave","current","duration","startDate","units","total","compId","tracker","record","setRecord","runningTotal","i","length","time","startOf","diff","today","setToday","yesterday","setYesterday","handleChange","e","target","value","name","map","index","parseFloat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartTotal from './GoalChartTotal';\nimport { round } from 'mathjs';\n\nconst GoalTotal = ({handleSave, current: { duration, startDate, units, total, compId, tracker }}) => {\n  const [record, setRecord] = useState(tracker);\n\n  //calc progress so far\n  let runningTotal = 0;\n  for (let i = 0; i < record.length; i++ ) {\n    runningTotal += record[i];\n  }\n\n  //calc time since goal started\n  let time = moment().startOf('day').diff(startDate, 'days');\n  if (time > duration)\n    time = duration;\n\n  //state for controlled variables\n  const [today, setToday] = useState(record[time]);\n  const [yesterday, setYesterday] = useState(record[time - 1]);\n\n  //if value is less than zero, null, if value is empty ('') set zero in array, otherwise set value in array\n  const handleChange = e => {\n    if (e.target.value < 0)\n      return null;\n    if(e.target.name === 'today') {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time) {\n          if (e.target.value === '')\n            value = 0;\n          else value = parseFloat(e.target.value);\n        }\n        return value;\n      }));\n    } else {\n      setYesterday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time - 1) {\n          if (e.target.value === '')\n            value = 0;\n          else value = parseFloat(e.target.value);\n        }\n        return value;\n      }))\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <ul>\n        <GoalChartTotal units={units} record={record} time={time}/>\n        <li className='table-info lr-border center'>\n          <strong>Record Your Progress</strong>\n        </li>\n        <li className='table-info lr-border center'>\n          <span>\n            Today: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n          </span>\n          <span>\n            <input \n              className='center'\n              id='chart-input'\n              type='number' \n              value={today} \n              name='today' \n              onChange={handleChange}\n              min='0'\n            />\n            {units}\n          </span>\n        </li>\n        <li className='table-info lr-border center'>\n          <span>\n            Yesterday: &nbsp;\n          </span>\n          <span>\n            <input \n              className='center'\n              id='chart-input'\n              type='number' \n              value={yesterday} \n              name='yesterday' \n              onChange={handleChange}\n              min='0'\n            />\n            {units}\n          </span>\n        </li>\n        <hr/>\n        <li className='table-info lr-border'>\n          <div className='space-between'>\n            <span>\n              Total: {runningTotal} / {total} {units}\n            </span>\n            <span>\n              Day: {time + 1} / {duration}\n            </span>\n          </div>\n        </li>\n        <li className='table-info lr-border'>You are {round(runningTotal / total * 100)}% finished with your goal.</li>\n      </ul>\n      <button className='btn btn-primary btn-block' onClick={() => handleSave(record)}>\n        Save Goal\n      </button>\n    </React.Fragment>\n  )\n}\n\nexport default GoalTotal;"]},"metadata":{},"sourceType":"module"}