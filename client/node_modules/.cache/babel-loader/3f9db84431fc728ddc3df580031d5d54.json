{"ast":null,"code":"import _objectSpread from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionForm.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport moment from 'moment';\nimport { useHistory } from 'react-router-dom';\n\nconst CompetitionForm = () => {\n  const goalContext = useContext(GoalContext);\n  const addGoal = goalContext.addGoal,\n        goalCurrent = goalContext.goalCurrent,\n        setCurrentGoal = goalContext.setCurrentGoal,\n        getGoals = goalContext.getGoals;\n  const alertContext = useContext(AlertContext);\n  const setAlert = alertContext.setAlert,\n        clearAlert = alertContext.clearAlert;\n  const competitionContext = useContext(CompetitionContext);\n  const addCompetition = competitionContext.addCompetition,\n        updateCompetition = competitionContext.updateCompetition,\n        competition = competitionContext.competition; //started determines if goal has begun, initialValue is used with difference goals \n\n  const _useState = useState({\n    name: '',\n    duration: 28,\n    startDate: moment().startOf('day').format('YYYY-MM-DD'),\n    type: 'pass/fail',\n    units: '',\n    total: 7,\n    isPrivate: false,\n    compId: null,\n    initialValue: 0,\n    started: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        goal = _useState2[0],\n        setGoal = _useState2[1]; //only attribute from competition model that can be set by the user\n\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isMax = _useState4[0],\n        setIsMax = _useState4[1]; //helps add new competition with useEffect\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isAdd = _useState6[0],\n        setIsAdd = _useState6[1]; //helps cleanup after competition updated\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isUpdate = _useState8[0],\n        setIsUpdate = _useState8[1]; //on start, control if adding or updating competition\n\n\n  useEffect(() => {\n    if (Object.entries(goalCurrent).length) {\n      setIsUpdate(true);\n      setGoal(_objectSpread({}, goalCurrent, {\n        startDate: moment.utc(goalCurrent.startDate).startOf('day'),\n        initialValue: goalCurrent.tracker[0]\n      }));\n\n      if (moment(goalCurrent.startDate).startOf('day') < moment.utc().startOf('day')) {\n        setGoal(_objectSpread({}, goalCurrent, {\n          started: true,\n          initialValue: goalCurrent.tracker[0]\n        }));\n        setAlert('This competition has already begun, so some attributes cannot be changed.');\n      }\n    }\n\n    if (Object.entries(competition).length !== 0) setIsMax(competition.isMax); //eslint-disable-next-line\n  }, []); //if adding, create competition, clear alert, and redirect\n\n  let history = useHistory();\n  useEffect(() => {\n    if (isAdd) {\n      let temp = async () => {\n        await addCompetition(goalCurrent._id, isMax);\n      };\n\n      temp();\n      clearAlert();\n      history.push('/competition');\n    } //eslint-disable-next-line\n\n  }, [isAdd]); //if updating, get goals, set updated goal as current, and clear alert before unmounting\n\n  useEffect(() => {\n    return async () => {\n      if (isUpdate) {\n        await getGoals();\n        setCurrentGoal(goalCurrent._id);\n        clearAlert();\n      }\n    }; //eslint-disable-next-line\n  }, [isUpdate]); //destructure goal \n\n  const name = goal.name,\n        duration = goal.duration,\n        startDate = goal.startDate,\n        type = goal.type,\n        units = goal.units,\n        total = goal.total,\n        isPrivate = goal.isPrivate,\n        initialValue = goal.initialValue,\n        started = goal.started; //add or update competition\n\n  const handleSubmit = async e => {\n    e.preventDefault(); //verify dates\n\n    let time = moment.utc().startOf('day').diff(startDate, 'days'); //verify start date not in past\n\n    if (time > 0 && !started) {\n      setAlert('Start date cannot be in the past.');\n      return null;\n    } //verify finish date is not in past (for goals that have started)\n\n\n    if (duration - time < 0) {\n      setAlert('Finish date cannot be in the past.');\n      return null;\n    } //try to submit \n\n\n    if (name && duration && startDate && type && total && (units || type === 'pass/fail')) {\n      //add/update competition and tell user\n      if (message === 'Modify Competition') {\n        await updateCompetition({\n          goal,\n          _id: competition._id,\n          isMax\n        });\n        setAlert('Competition updated!', true);\n        history.push('/competition');\n      } else {\n        await addGoal(goal);\n        setAlert('Competition added!', true);\n        setIsAdd(true);\n      }\n    } else setAlert('Please enter all fields.');\n  }; //update state with inputs\n\n\n  const handleChange = e => {\n    if (e.target.name === 'duration' || e.target.name === 'total' || e.target.name === 'initialValue') {\n      if (e.target.value === '') setGoal(_objectSpread({}, goal, {\n        [e.target.name]: ''\n      }));else setGoal(_objectSpread({}, goal, {\n        [e.target.name]: parseInt(e.target.value)\n      }));\n    } else if (e.target.name === 'type' && e.target.value === 'pass/fail') setGoal(_objectSpread({}, goal, {\n      total: 7,\n      type: 'pass/fail'\n    }));else setGoal(_objectSpread({}, goal, {\n      [e.target.name]: e.target.value\n    }));\n  }; //update isPrivate state with input\n\n\n  const handleClick = e => {\n    setGoal(_objectSpread({}, goal, {\n      isPrivate: !isPrivate\n    }));\n  };\n\n  const message = Object.entries(goalCurrent).length ? 'Modify Competition' : 'Add Competition';\n  return React.createElement(\"div\", {\n    className: \"form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, message), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Competition Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onChange: handleChange,\n    value: name,\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Start Date\"), React.createElement(\"input\", {\n    disabled: started,\n    type: \"date\",\n    name: \"startDate\",\n    onChange: handleChange,\n    value: started ? moment.utc(startDate).format('YYYY-MM-DD') : moment(startDate).format('YYYY-MM-DD'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Competition Duration (days)\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"duration\",\n    onChange: handleChange,\n    value: duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), type === 'pass/fail' && !Number.isInteger(duration / 7) && duration !== '' && React.createElement(\"span\", {\n    className: \"block small-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"*Competition duration will be adjusted to \", duration - duration % 7 + 7, \" days to use full weeks.\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"What type of competition would you like?\", React.createElement(\"select\", {\n    disabled: started,\n    name: \"type\",\n    value: type,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"pass/fail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Pass/Fail  (e.g. Miss class the least)\"), React.createElement(\"option\", {\n    value: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Total  (e.g. Run the most miles)\"), React.createElement(\"option\", {\n    value: \"difference\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Difference  (e.g. Lose the most weight)\")))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, type === 'pass/fail' && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"How many days a week do you want participants to hit?\"), React.createElement(\"select\", {\n    disabled: started,\n    name: \"total\",\n    value: total,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"Every day\"), React.createElement(\"option\", {\n    value: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"Six days a week\"), React.createElement(\"option\", {\n    value: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"Five days a week\"), React.createElement(\"option\", {\n    value: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"Four days a week\"), React.createElement(\"option\", {\n    value: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"Three days a week\"), React.createElement(\"option\", {\n    value: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"Twice a week\"), React.createElement(\"option\", {\n    value: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Once a week\"))), type === 'difference' && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"What is your (personal) start number?\"), React.createElement(\"input\", {\n    disabled: started,\n    type: \"number\",\n    name: \"initialValue\",\n    onChange: handleChange,\n    value: initialValue,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }))), type !== 'pass/fail' && React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"Units (e.g lbs or miles)\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"units\",\n    onChange: handleChange,\n    value: units,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, \"Who can see this competition?\"), React.createElement(\"label\", {\n    className: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: !isPrivate,\n    onChange: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"slider round\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: \"register-span\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, isPrivate ? 'Only participants can see this competition.' : 'Friends of participants can see this competition.')), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"How is this competition decided?\"), React.createElement(\"label\", {\n    className: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: isMax,\n    onChange: () => setIsMax(!isMax),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"slider round\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: \"register-span\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"This competition is won by the user with the\", type === 'pass/fail' && (isMax ? ' highest ' : 'lowest ') + 'number of checked days.', type === 'total' && (isMax ? ' highest ' : 'lowest ') + `total ${units}.`, type === 'difference' && ' biggest ' + (isMax ? 'positive ' : 'negative ') + 'change.')), React.createElement(\"input\", {\n    type: \"submit\",\n    value: message,\n    className: \"btn btn-block btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  })));\n};\n\nexport default CompetitionForm;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionForm.js"],"names":["React","useState","useContext","useEffect","GoalContext","CompetitionContext","AlertContext","moment","useHistory","CompetitionForm","goalContext","addGoal","goalCurrent","setCurrentGoal","getGoals","alertContext","setAlert","clearAlert","competitionContext","addCompetition","updateCompetition","competition","name","duration","startDate","startOf","format","type","units","total","isPrivate","compId","initialValue","started","goal","setGoal","isMax","setIsMax","isAdd","setIsAdd","isUpdate","setIsUpdate","Object","entries","length","utc","tracker","history","temp","_id","push","handleSubmit","e","preventDefault","time","diff","message","handleChange","target","value","parseInt","handleClick","Number","isInteger"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport moment from 'moment';\nimport { useHistory } from 'react-router-dom';\n\nconst CompetitionForm = () => {\n  const goalContext = useContext(GoalContext);\n  const { addGoal, goalCurrent, setCurrentGoal, getGoals } = goalContext;\n\n  const alertContext = useContext(AlertContext);\n  const { setAlert, clearAlert } = alertContext;\n\n  const competitionContext = useContext(CompetitionContext);\n  const { addCompetition, updateCompetition, competition } = competitionContext;\n\n  //started determines if goal has begun, initialValue is used with difference goals \n  const [goal, setGoal] = useState({\n    name: '',\n    duration: 28,\n    startDate: moment().startOf('day').format('YYYY-MM-DD'),\n    type: 'pass/fail',\n    units: '',\n    total: 7,\n    isPrivate: false,\n    compId: null,\n    initialValue: 0,\n    started: false\n  });\n\n  //only attribute from competition model that can be set by the user\n  const [isMax, setIsMax] = useState(true);  \n  \n  //helps add new competition with useEffect\n  const [isAdd, setIsAdd] = useState(false);\n\n  //helps cleanup after competition updated\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  //on start, control if adding or updating competition\n  useEffect(() => {\n    if (Object.entries(goalCurrent).length) {\n      setIsUpdate(true);\n      setGoal({ \n        ...goalCurrent, \n        startDate: moment.utc(goalCurrent.startDate).startOf('day'),\n        initialValue: goalCurrent.tracker[0]\n      });\n      if (moment(goalCurrent.startDate).startOf('day') < moment.utc().startOf('day')) {\n        setGoal({\n          ...goalCurrent, \n          started: true,\n          initialValue: goalCurrent.tracker[0] \n        })\n        setAlert('This competition has already begun, so some attributes cannot be changed.')\n      }\n    }\n    if (Object.entries(competition).length !== 0)\n      setIsMax(competition.isMax)\n    //eslint-disable-next-line\n  }, [])\n\n  //if adding, create competition, clear alert, and redirect\n  let history = useHistory();\n  useEffect(() => {\n    if (isAdd) {\n      let temp = async () => {\n        await addCompetition(goalCurrent._id, isMax);\n      }\n      temp();\n      clearAlert();\n      history.push('/competition');\n    }\n    //eslint-disable-next-line\n  }, [isAdd])\n\n  //if updating, get goals, set updated goal as current, and clear alert before unmounting\n  useEffect(() => {\n    return async () => {\n      if (isUpdate) {\n        await getGoals();\n        setCurrentGoal(goalCurrent._id);\n        clearAlert();\n      }\n    }\n    //eslint-disable-next-line\n  }, [isUpdate])\n  \n  //destructure goal \n  const { name, duration, startDate, type, units, total, isPrivate, initialValue, started } = goal;\n  \n  //add or update competition\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    //verify dates\n    let time = moment.utc().startOf('day').diff(startDate, 'days');\n    //verify start date not in past\n    if(time > 0 && !started) {\n      setAlert('Start date cannot be in the past.');\n      return null;\n    }\n    //verify finish date is not in past (for goals that have started)\n    if(duration - time < 0){\n      setAlert('Finish date cannot be in the past.');\n      return null;\n    }\n\n    //try to submit \n    if(name && duration && startDate && type && total && (units || type === 'pass/fail')) {\n      //add/update competition and tell user\n      if (message === 'Modify Competition') {\n        await updateCompetition({goal, _id: competition._id, isMax});\n        setAlert('Competition updated!', true);\n        history.push('/competition');\n      } else {\n        await addGoal(goal);\n        setAlert('Competition added!', true);\n        setIsAdd(true);\n      }\n    }\n    else \n      setAlert('Please enter all fields.');\n  };\n\n  //update state with inputs\n  const handleChange = e => {\n    if (e.target.name === 'duration' || e.target.name === 'total' || e.target.name === 'initialValue') {\n      if (e.target.value === '') \n        setGoal({ ...goal, [e.target.name]: ''});\n      else \n        setGoal({ ...goal, [e.target.name]: parseInt(e.target.value)});\n    }\n    else if (e.target.name === 'type' && e.target.value === 'pass/fail')\n      setGoal({ ...goal, total: 7, type: 'pass/fail' });\n    else\n      setGoal({\n        ...goal, \n        [e.target.name]: e.target.value\n      });\n  };\n\n  //update isPrivate state with input\n  const handleClick = e => {\n    setGoal({ ...goal, isPrivate: !isPrivate });\n  };\n  \n  const message = Object.entries(goalCurrent).length ? 'Modify Competition' : 'Add Competition';\n\n  return (\n    <div className='form-container'>\n      <h1>{message}</h1>\n      <form onSubmit={handleSubmit} autoComplete='off'>\n        {/* Name */}\n        <div className=\"form-group\">\n          <label>Competition Name</label>\n          <input \n            type='text' \n            name='name' \n            onChange={handleChange}\n            value={name}\n            autoFocus={true}\n          />\n        </div>\n        {/* Start Date */}\n        <div className=\"form-group\">\n          <label>Start Date</label>\n          <input \n            disabled={started}\n            type='date' \n            name='startDate' \n            onChange={handleChange}\n            value={started ? moment.utc(startDate).format('YYYY-MM-DD') : moment(startDate).format('YYYY-MM-DD')}\n          />\n        </div>\n        {/* Duration */}\n        <div className=\"form-group\">\n          <label>Competition Duration (days)</label>\n          <input \n            type='number' \n            name='duration' \n            onChange={handleChange}\n            value={duration}\n          />\n          {type === 'pass/fail' && !(Number.isInteger(duration / 7)) && (duration !== '') &&\n            <span className='block small-text'>*Competition duration will be adjusted to {duration - (duration % 7) + 7} days to use full weeks.</span>\n          }\n        </div>\n        {/* Type */}\n        <div className=\"form-group\">\n          <label>What type of competition would you like?\n            <select\n              disabled={started}\n              name='type'\n              value={type}\n              onChange={handleChange}\n            >\n              <option value='pass/fail'>Pass/Fail  (e.g. Miss class the least)</option>\n              <option value='total'>Total  (e.g. Run the most miles)</option>\n              <option value='difference'>Difference  (e.g. Lose the most weight)</option>\n            </select>  \n          </label>\n        </div>\n        {/* Total */}\n        <div className=\"form-group\">\n          {type === 'pass/fail' && (\n            <React.Fragment>\n              <label>\n                How many days a week do you want participants to hit?\n              </label>\n              <select\n                disabled={started}\n                name='total'\n                value={total}\n                onChange={handleChange}\n              >\n                <option value='7'>Every day</option>\n                <option value='6'>Six days a week</option>\n                <option value='5'>Five days a week</option>\n                <option value='4'>Four days a week</option>\n                <option value='3'>Three days a week</option>\n                <option value='2'>Twice a week</option>\n                <option value='1'>Once a week</option>\n              </select>  \n            </React.Fragment>\n          )}\n          {type === 'difference' && (\n            <React.Fragment>\n              <label>What is your (personal) start number?</label>\n              <input \n                disabled={started}\n                type='number' \n                name='initialValue' \n                onChange={handleChange}\n                value={initialValue}\n                min='0'\n              />\n            </React.Fragment>\n          )}\n        </div>\n        {/* Units */}\n        {type !== 'pass/fail' && (\n          <div className=\"form-group\">\n            <label>Units (e.g lbs or miles)</label>\n            <input \n              type='text' \n              name='units' \n              onChange={handleChange}\n              value={units}\n            />\n          </div> \n        )}\n        {/* isPrivate */}\n        <div className=\"form-group\">\n          <label className='block'>\n            Who can see this competition?\n          </label>\n          <label className='switch'>\n            <input\n              type='checkbox'\n              checked={!isPrivate}\n              onChange={handleClick}\n            />\n            <span className='slider round'/>\n          </label>\n          <span className='register-span'>\n            {isPrivate ? 'Only participants can see this competition.' : 'Friends of participants can see this competition.'}\n          </span>\n        </div>\n        {/* isMax */}\n        <div className=\"form-group\">\n          <label className='block'>\n            How is this competition decided?\n          </label>\n          <label className='switch'>\n            <input\n              type='checkbox'\n              checked={isMax}\n              onChange={() => setIsMax(!isMax)}\n            />\n            <span className='slider round'/>\n          </label>\n          <span className='register-span'>\n            This competition is won by the user with the\n            {type === 'pass/fail' && \n              ((isMax ? ' highest ' : 'lowest ') + 'number of checked days.')} \n            {type === 'total' && \n              ((isMax ? ' highest ' : 'lowest ') + `total ${units}.`)} \n            {type === 'difference' && \n              (' biggest ' + (isMax ? 'positive ' : 'negative ') + 'change.')}\n          </span>\n        </div>\n        {/* Submit */}\n        <input \n          type='submit' \n          value={message} \n          className='btn btn-block btn-primary'\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default CompetitionForm;"]},"metadata":{},"sourceType":"module"}