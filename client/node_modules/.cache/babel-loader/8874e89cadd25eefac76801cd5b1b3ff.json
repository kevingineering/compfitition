{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport Leaderboard from './Leaderboard';\nimport Participants from './Participants'; // import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\n\nimport moment from 'moment';\n\nconst CompetitionPage = props => {\n  const goalContext = useContext(GoalContext);\n  const goalCurrent = goalContext.goalCurrent,\n        clearCurrentGoal = goalContext.clearCurrentGoal,\n        goalsError = goalContext.goalsError,\n        updateGoalTracker = goalContext.updateGoalTracker;\n  const alertContext = useContext(AlertContext);\n  const setAlert = alertContext.setAlert,\n        clearAlert = alertContext.clearAlert;\n  const competitionContext = useContext(CompetitionContext);\n  const getCompetitionGoals = competitionContext.getCompetitionGoals,\n        getCompetitionParticipants = competitionContext.getCompetitionParticipants,\n        competition = competitionContext.competition,\n        competitionGoals = competitionContext.competitionGoals,\n        competitionParticipants = competitionContext.competitionParticipants,\n        competitionLoading = competitionContext.competitionLoading,\n        competitionError = competitionContext.competitionError,\n        deleteCompetition = competitionContext.deleteCompetition,\n        clearCompetition = competitionContext.clearCompetition;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        deleteToggle = _useState2[0],\n        setDeleteToggle = _useState2[1];\n\n  const name = goalCurrent.name,\n        type = goalCurrent.type,\n        startDate = goalCurrent.startDate,\n        duration = goalCurrent.duration,\n        compId = goalCurrent.compId;\n  const _id = competition._id,\n        goalId = competition.goalId,\n        adminIds = competition.adminIds,\n        isMax = competition.isMax; //console.log(goalsError, updateGoalTracker, type, goalId, adminIds, isMax, competitionLoading);\n  //get competition goals and participants\n\n  useEffect(() => {\n    if (Object.entries(competition).length !== 0) {\n      getCompetitionGoals(competition._id);\n      getCompetitionParticipants(competition._id);\n    } //eslint-disable-next-line\n\n  }, [competition]); //calc time to determine which day of competition we are on\n\n  let time = moment().startOf('day').diff(startDate, 'days'); //handleDelete\n\n  const handleDelete = async () => {\n    await deleteCompetition(_id);\n\n    if (competitionError) {\n      setAlert(competitionError);\n    } else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  }; //handleSave - passed down to goal containers\n\n\n  const handleSave = async record => {\n    await updateGoalTracker(record, _id);\n\n    if (goalsError) {\n      setAlert(goalsError);\n    } else {\n      setAlert('Goal saved!');\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"grid-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Participants, {\n    participants: competitionParticipants,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Leaderboard, {\n    goals: competitionGoals,\n    time: time,\n    participants: competitionParticipants,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, !Object.entries(competition).length ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"collection-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, name), time <= duration && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/competitionform\",\n    className: \"btn btn-primary btn-block center\",\n    onClick: clearAlert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Modify Competition\")), !deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => setDeleteToggle(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Delete Competition\")), deleteToggle && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"alert lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Are you sure you want to delete this competition? This will affect multiple users, and deletions cannot be undone.\"), React.createElement(\"button\", {\n    className: \"btn btn-danger btn-split\",\n    onClick: handleDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Yes\"), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-split\",\n    onClick: () => setDeleteToggle(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"No\")))));\n};\n\nexport default CompetitionPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js"],"names":["React","useContext","useState","useEffect","Link","GoalContext","AlertContext","CompetitionContext","Leaderboard","Participants","moment","CompetitionPage","props","goalContext","goalCurrent","clearCurrentGoal","goalsError","updateGoalTracker","alertContext","setAlert","clearAlert","competitionContext","getCompetitionGoals","getCompetitionParticipants","competition","competitionGoals","competitionParticipants","competitionLoading","competitionError","deleteCompetition","clearCompetition","deleteToggle","setDeleteToggle","name","type","startDate","duration","compId","_id","goalId","adminIds","isMax","Object","entries","length","time","startOf","diff","handleDelete","history","push","handleSave","record"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport Leaderboard from './Leaderboard';\nimport Participants from './Participants';\n// import GoalPassFail from '../goals/GoalPassFail';\n// import GoalTotal from '../goals/GoalTotal';\n// import GoalDifference from '../goals/GoalDifference';\nimport moment from 'moment';\n\nconst CompetitionPage = props => {\n  const goalContext = useContext(GoalContext);\n  const { goalCurrent, clearCurrentGoal, goalsError, updateGoalTracker } = goalContext;\n\n  const alertContext = useContext(AlertContext);\n  const { setAlert, clearAlert } = alertContext;\n\n  const competitionContext = useContext(CompetitionContext);\n  const { getCompetitionGoals, getCompetitionParticipants, competition, competitionGoals, competitionParticipants, competitionLoading, competitionError, deleteCompetition, clearCompetition } = competitionContext;\n\n  const [deleteToggle, setDeleteToggle] = useState(false);\n\n  const { name, type, startDate, duration, compId } = goalCurrent;\n  const { _id, goalId, adminIds, isMax } = competition;\n\n  //console.log(goalsError, updateGoalTracker, type, goalId, adminIds, isMax, competitionLoading);\n\n  //get competition goals and participants\n  useEffect(() => {\n    if(Object.entries(competition).length !== 0) {\n      getCompetitionGoals(competition._id);\n      getCompetitionParticipants(competition._id);\n    }\n    //eslint-disable-next-line\n  }, [competition])\n\n  //calc time to determine which day of competition we are on\n  let time = moment().startOf('day').diff(startDate, 'days');\n\n\n  //handleDelete\n  const handleDelete = async () => {\n    await deleteCompetition(_id);\n    if (competitionError) {\n      setAlert(competitionError);\n    }\n    else {\n      setAlert('Competition deleted!', true);\n      props.history.push('/');\n      clearCurrentGoal();\n      clearCompetition();\n    }\n  };\n\n  //handleSave - passed down to goal containers\n  const handleSave = async (record) => {\n    await updateGoalTracker(record, _id);\n    if (goalsError) {\n      setAlert(goalsError);\n    }\n    else {\n      setAlert('Goal saved!');\n    }\n  }\n\n  return (\n    <div className='grid-2'>\n      <Participants \n        participants={competitionParticipants} \n      />\n      <Leaderboard \n        goals={competitionGoals} \n        time={time}\n        participants={competitionParticipants}  \n      />\n      <div className='form-container'>\n      {!Object.entries(competition).length ? (\n        <h2>Loading...</h2>\n      ) : (\n        <React.Fragment>\n          <h2 className='collection-header'>{name}</h2>\n          {/* Goal Container */}\n          {/* Modify Button */}\n          {time <= duration &&\n            <React.Fragment>\n              <Link \n                to='/competitionform' \n                className='btn btn-primary btn-block center' \n                onClick={clearAlert}\n              >\n                Modify Competition\n              </Link>\n            </React.Fragment>\n          }\n          {/* Delete Button */}\n          {!deleteToggle &&\n          <React.Fragment>\n            <p className='lr-border'/>\n            <button \n              className='btn btn-primary btn-block' \n              onClick={() => setDeleteToggle(true)}\n            >\n              Delete Competition\n            </button>\n          </React.Fragment>\n        }        \n        {/*Delete module*/}\n        {deleteToggle && (\n          <React.Fragment>\n            <hr/>\n            <span className='alert lr-border'>\n              Are you sure you want to delete this competition? This will affect multiple users, and deletions cannot be undone.\n            </span>\n            <button\n              className='btn btn-danger btn-split'\n              onClick={handleDelete}\n            >Yes</button>\n            <button\n              className='btn btn-primary btn-split'\n              onClick={() => setDeleteToggle(false)}\n            >No</button>\n          </React.Fragment>\n        )}\n        </React.Fragment>\n      )}\n    </div>\n    </div>\n  )\n}\n\nexport default CompetitionPage;"]},"metadata":{},"sourceType":"module"}