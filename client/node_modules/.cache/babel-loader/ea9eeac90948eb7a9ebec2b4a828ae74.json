{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport AuthContext from '../../contexts/auth/authContext';\nimport Leaderboard from './complists/Leaderboard';\nimport Participants from './complists/Participants';\nimport InviteTable from './complists/InviteTable';\nimport moment from 'moment';\nimport CompetitionTable from './comptable/CompetitionTable';\nimport CreateArray from './comptable/CreateArray';\n\nconst CompetitionPage = () => {\n  const _useContext = useContext(GoalContext),\n        goalCurrent = _useContext.goalCurrent;\n\n  const startDate = goalCurrent.startDate,\n        duration = goalCurrent.duration,\n        type = goalCurrent.type;\n\n  const _useContext2 = useContext(AlertContext),\n        setAlert = _useContext2.setAlert,\n        clearAlert = _useContext2.clearAlert;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        competitionArray = _useState2[0],\n        setCompetitionArray = _useState2[1];\n\n  const _useContext3 = useContext(CompetitionContext),\n        getCompetitionGoals = _useContext3.getCompetitionGoals,\n        getCompetitionParticipants = _useContext3.getCompetitionParticipants,\n        competition = _useContext3.competition,\n        competitionGoals = _useContext3.competitionGoals,\n        competitionParticipants = _useContext3.competitionParticipants,\n        competitionError = _useContext3.competitionError;\n\n  const _useContext4 = useContext(AuthContext),\n        user = _useContext4.user;\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isAdmin = _useState4[0],\n        setIsAdmin = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isAdminView = _useState6[0],\n        setIsAdminView = _useState6[1]; //calc time to determine which day of competition we are on\n\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  if (time > duration) time = duration;\n  const isComplete = time === duration ? true : false; //create competitionArray\n\n  useEffect(() => {\n    if (competitionParticipants.length !== 0 && competitionGoals.length !== 0) {\n      let array = CreateArray(competitionParticipants, competitionGoals, type, time, duration, competition.isMax);\n      setCompetitionArray(array);\n    }\n  }, [competitionGoals, competitionParticipants]); //set alert if error occurs\n\n  useEffect(() => {\n    if (competitionError) setAlert(competitionError); //eslint-disable-next-line\n  }, [competitionError]); //clear alert and competition before redirect\n\n  useEffect(() => {\n    return () => {\n      clearAlert();\n    }; //eslint-disable-next-line\n  }, []); //get competition goals and participants\n\n  useEffect(() => {\n    if (Object.entries(competition).length !== 0) {\n      getCompetitionGoals(competition._id);\n      getCompetitionParticipants(competition._id);\n      if (competition.adminIds.includes(user._id)) setIsAdmin(true);\n    } //eslint-disable-next-line\n\n  }, [competition]);\n  return React.createElement(\"div\", {\n    className: \"competition-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"grid-1-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, isAdmin && React.createElement(\"div\", {\n    className: \"collection competition-lists-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => setIsAdminView(!isAdminView),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, isAdminView ? 'View as User' : 'View as Admin'))), isStarted && React.createElement(Leaderboard, {\n    competitionArray: competitionArray,\n    type: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), (isAdminView || !isStarted) && React.createElement(Participants, {\n    participants: competitionParticipants,\n    isAdmin: isAdmin,\n    compId: competition._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), isAdminView && !isStarted && React.createElement(InviteTable, {\n    participants: competitionParticipants,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(CompetitionTable, {\n    isAdmin: isAdmin,\n    isAdminView: isAdminView,\n    isStarted: isStarted,\n    isActive: time < duration,\n    isComplete: isComplete,\n    time: time,\n    competitionArray: competitionArray,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }))));\n};\n\nexport default CompetitionPage;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/competitions/CompetitionPage.js"],"names":["React","useContext","useState","useEffect","GoalContext","CompetitionContext","AlertContext","AuthContext","Leaderboard","Participants","InviteTable","moment","CompetitionTable","CreateArray","CompetitionPage","goalCurrent","startDate","duration","type","setAlert","clearAlert","competitionArray","setCompetitionArray","getCompetitionGoals","getCompetitionParticipants","competition","competitionGoals","competitionParticipants","competitionError","user","isAdmin","setIsAdmin","isAdminView","setIsAdminView","time","startOf","diff","timeHours","isStarted","isComplete","length","array","isMax","Object","entries","_id","adminIds","includes"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport GoalContext from '../../contexts/goals/goalContext';\nimport CompetitionContext from '../../contexts/competitions/competitionContext';\nimport AlertContext from '../../contexts/alerts/alertContext';\nimport AuthContext from '../../contexts/auth/authContext';\nimport Leaderboard from './complists/Leaderboard';\nimport Participants from './complists/Participants';\nimport InviteTable from './complists/InviteTable';\nimport moment from 'moment';\nimport CompetitionTable from './comptable/CompetitionTable';\nimport CreateArray from './comptable/CreateArray';\n\nconst CompetitionPage = () => {\n  const { goalCurrent } = useContext(GoalContext);\n\n  const {startDate, duration, type} = goalCurrent;\n  \n  const { setAlert, clearAlert } = useContext(AlertContext);\n\n  const [competitionArray, setCompetitionArray] = useState([]);\n\n  const { \n    getCompetitionGoals, \n    getCompetitionParticipants, \n    competition, \n    competitionGoals, \n    competitionParticipants,\n    competitionError\n  } = useContext(CompetitionContext);\n\n  const { user } = useContext(AuthContext);\n\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isAdminView, setIsAdminView] = useState(false);\n\n  //calc time to determine which day of competition we are on\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  const isStarted = timeHours >= 0 ? true : false;\n  if (time > duration)\n    time = duration;\n  const isComplete = time === duration ? true : false;\n  \n  //create competitionArray\n  useEffect(() => {\n    if(competitionParticipants.length !== 0 && competitionGoals.length !== 0) {\n      let array = CreateArray(\n        competitionParticipants, \n        competitionGoals, \n        type, \n        time, \n        duration, \n        competition.isMax\n      );\n      setCompetitionArray(array);\n    }\n  }, [competitionGoals, competitionParticipants])\n  \n  //set alert if error occurs\n  useEffect(() => {\n    if(competitionError)\n      setAlert(competitionError);\n    //eslint-disable-next-line\n  }, [competitionError])\n\n  //clear alert and competition before redirect\n  useEffect(() => {\n    return () => {\n      clearAlert();\n    }\n    //eslint-disable-next-line\n  }, []);\n\n  //get competition goals and participants\n  useEffect(() => {\n    if(Object.entries(competition).length !== 0) {\n      getCompetitionGoals(competition._id);\n      getCompetitionParticipants(competition._id);\n      if(competition.adminIds.includes(user._id))\n        setIsAdmin(true);\n    }\n    //eslint-disable-next-line\n  }, [competition])\n\n  return (\n    <div className='competition-container'>\n      <div className='grid-1-2'>\n        <div>\n          {isAdmin && \n            <div className='collection competition-lists-container'>\n              <button className='btn btn-primary btn-block' onClick={() => setIsAdminView(!isAdminView)}>\n                <h3>{isAdminView ? 'View as User' : 'View as Admin'}</h3>\n              </button>\n            </div>\n          }\n          {isStarted &&\n            <Leaderboard \n              competitionArray={competitionArray}\n              type={type}\n            />\n          }\n          {(isAdminView || !isStarted) && \n            <Participants \n              participants={competitionParticipants} \n              isAdmin={isAdmin}\n              compId={competition._id}\n            />\n          }\n          {(isAdminView && !isStarted) &&\n            <InviteTable \n              participants={competitionParticipants}\n            />\n          }\n        </div>\n        <div>\n          <CompetitionTable \n            isAdmin={isAdmin}\n            isAdminView={isAdminView}\n            isStarted={isStarted}\n            isActive={time < duration}\n            isComplete={isComplete} \n            time={time}\n            competitionArray={competitionArray}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CompetitionPage;"]},"metadata":{},"sourceType":"module"}