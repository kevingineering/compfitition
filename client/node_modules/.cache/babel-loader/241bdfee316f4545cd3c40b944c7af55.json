{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalTotal.js\";\nimport React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartTotal from './GoalChartTotal';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\n\nconst GoalTotal = ({\n  handleSave,\n  goalsCurrent: {\n    duration,\n    startDate,\n    units,\n    total,\n    compId,\n    tracker\n  }\n}) => {\n  const _useState = useState(tracker),\n        _useState2 = _slicedToArray(_useState, 2),\n        record = _useState2[0],\n        setRecord = _useState2[1]; //calc progress so far\n\n\n  let runningTotal = 0;\n\n  for (let i = 0; i < record.length; i++) {\n    runningTotal += record[i];\n  } //calc time since goal started\n\n\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let timeHours = moment().startOf('day').diff(startDate, 'hours');\n  if (time > duration) time = duration;\n  console.log(time);\n  console.log(timeHours); //state for controlled variables\n\n  const _useState3 = useState(record[time]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        today = _useState4[0],\n        setToday = _useState4[1];\n\n  const _useState5 = useState(record[time - 1]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        yesterday = _useState6[0],\n        setYesterday = _useState6[1]; //if value is less than zero, null, if value is empty ('') set zero in array, otherwise set value in array\n\n\n  const handleChange = e => {\n    if (e.target.value < 0) return null;\n\n    if (e.target.name === 'today') {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time) {\n          if (e.target.value === '') value = 0;else value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    } else {\n      setYesterday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time - 1) {\n          if (e.target.value === '') value = 0;else value = parseFloat(e.target.value);\n        }\n\n        return value;\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, timeHours >= 0 ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(GoalChartTotal, {\n    units: units,\n    record: record,\n    time: time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Record Your Progress\")), React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"width-75\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Today:\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"center\",\n    id: \"chart-input\",\n    type: \"number\",\n    value: today,\n    name: \"today\",\n    onChange: handleChange,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), units)), time > 0 && React.createElement(\"li\", {\n    className: \"table-info lr-border center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"width-75\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Yesterday:\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"center\",\n    id: \"chart-input\",\n    type: \"number\",\n    value: yesterday,\n    name: \"yesterday\",\n    onChange: handleChange,\n    min: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), units)), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Total: \", runningTotal, \" / \", total, \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Day: \", time + 1, \" / \", duration))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Goal Completion: \", round(runningTotal / total * 100), \"%\")), React.createElement(\"button\", {\n    className: \"btn btn-primary btn-block\",\n    onClick: () => handleSave(record),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Save Goal\"), React.createElement(\"p\", {\n    className: \"lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })) : React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Goal: \", total, \" \", units), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Begins \", moment.utc(startDate).format('MMM Do')))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Duration: \", duration, \" days\")))));\n};\n\nGoalTotal.propTypes = {\n  handleSave: PropTypes.func.isRequired,\n  goalsCurrent: PropTypes.object.isRequired\n};\nexport default GoalTotal;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/GoalTotal.js"],"names":["React","useState","moment","GoalChartTotal","round","PropTypes","GoalTotal","handleSave","goalsCurrent","duration","startDate","units","total","compId","tracker","record","setRecord","runningTotal","i","length","time","startOf","diff","timeHours","console","log","today","setToday","yesterday","setYesterday","handleChange","e","target","value","name","map","index","parseFloat","utc","format","propTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport GoalChartTotal from './GoalChartTotal';\nimport { round } from 'mathjs';\nimport PropTypes from 'prop-types';\n\nconst GoalTotal = ({handleSave, goalsCurrent: { duration, startDate, units, total, compId, tracker }}) => {\n  const [record, setRecord] = useState(tracker);\n\n  //calc progress so far\n  let runningTotal = 0;\n  for (let i = 0; i < record.length; i++ ) {\n    runningTotal += record[i];\n  }\n\n  //calc time since goal started\n  let time = moment().startOf('day').diff(startDate, 'days');\n  let timeHours = moment().startOf('day').diff(startDate, 'hours')\n  if (time > duration)\n    time = duration;\n\n  console.log(time);\n  console.log(timeHours);\n\n  //state for controlled variables\n  const [today, setToday] = useState(record[time]);\n  const [yesterday, setYesterday] = useState(record[time - 1]);\n\n  //if value is less than zero, null, if value is empty ('') set zero in array, otherwise set value in array\n  const handleChange = e => {\n    if (e.target.value < 0)\n      return null;\n    if(e.target.name === 'today') {\n      setToday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time) {\n          if (e.target.value === '')\n            value = 0;\n          else value = parseFloat(e.target.value);\n        }\n        return value;\n      }));\n    } else {\n      setYesterday(e.target.value);\n      setRecord(record.map((value, index) => {\n        if (index === time - 1) {\n          if (e.target.value === '')\n            value = 0;\n          else value = parseFloat(e.target.value);\n        }\n        return value;\n      }))\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {timeHours >= 0 ? (\n        <React.Fragment>\n          <ul>\n            <GoalChartTotal units={units} record={record} time={time}/>\n            <li className='table-info lr-border center'>\n              <strong>Record Your Progress</strong>\n            </li>\n            <li className='table-info lr-border center'>\n              <span className='width-75'>\n                Today:\n              </span>\n              <span>\n                <input \n                  className='center'\n                  id='chart-input'\n                  type='number' \n                  value={today} \n                  name='today' \n                  onChange={handleChange}\n                  min='0'\n                />\n                {units}\n              </span>\n            </li>\n            {time > 0 &&\n              <li className='table-info lr-border center'>\n                <span className='width-75'>\n                  Yesterday:\n                </span>\n                <span>\n                  <input \n                    className='center'\n                    id='chart-input'\n                    type='number' \n                    value={yesterday} \n                    name='yesterday' \n                    onChange={handleChange}\n                    min='0'\n                  />\n                  {units}\n                </span>\n              </li>\n            }\n            <hr/>\n            <li className='table-info lr-border'>\n              <div className='space-between'>\n                <span>\n                  Total: {runningTotal} / {total} {units}\n                </span>\n                <span className='right'>\n                  Day: {time + 1} / {duration}\n                </span>\n              </div>\n            </li>\n            <li className='table-info lr-border'>Goal Completion: {round(runningTotal / total * 100)}%</li>\n          </ul>\n          <button className='btn btn-primary btn-block' onClick={() => handleSave(record)}>\n            Save Goal\n          </button>\n          <p className='lr-border'/>\n        </React.Fragment>\n      ) : (\n        <ul>\n          <li className='table-info lr-border'>\n            <div className='space-between'>\n              <span>\n                Goal: {total} {units}\n              </span>\n              <span className='right'>\n                Begins {moment.utc(startDate).format('MMM Do')}\n              </span>\n            </div>\n          </li>\n          <li className='table-info lr-border'>\n            <div className='space-between'>\n              <span>\n                Duration: {duration} days\n              </span>\n            </div>\n          </li>\n        </ul>\n      )\n      }\n    </React.Fragment>\n  )\n}\n\nGoalTotal.propTypes = {\n  handleSave: PropTypes.func.isRequired,\n  goalsCurrent: PropTypes.object.isRequired\n}\n\nexport default GoalTotal;"]},"metadata":{},"sourceType":"module"}