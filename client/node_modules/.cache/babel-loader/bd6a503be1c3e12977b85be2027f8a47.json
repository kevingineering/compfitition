{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/goalPieces/GoalInfo.js\";\nimport React from 'react';\nimport { round } from 'mathjs';\n\nconst GoalInfo = ({\n  goal,\n  time,\n  record,\n  value\n}) => {\n  const duration = goal.duration,\n        startDate = goal.startDate,\n        units = goal.units,\n        total = goal.total,\n        type = goal.type;\n  let topLeft = `Start Date: ${moment.utc(startDate).format('MMMM Do, YYYY')}`;\n  let topRight = null;\n  let middleLeft = null;\n  let middleRight = null;\n  let bottomLeft = null;\n  let bottomRight = null; //difference\n\n  if (type === 'difference') {\n    topRight = time === duration ? `Final: ${record[0] + value} ${units}` : `Day: ${time + 1} / ${duration}`;\n    middleLeft = `Start: ${record[0]} ${units}`;\n    middleRight = `Goal: ${total} ${units}`;\n    bottomLeft = time === duration ? `Final: ${record[0] + value} ${units}` : `Current: ${record[0] + value}`;\n    bottomRight = `Change: ${value > 0 ? '+' : ''}${value} ${units}`;\n  } //total\n  else if (time === duration && type === 'total') {\n      topRight = time === duration ? `Duration: ${duration} days` : `Day: ${time + 1} / ${duration}`;\n      middleLeft = `Total: ${value} / ${total} ${units}`;\n      middleRight = `Goal Completion: ${round(runningTotal / total * 100)}%`;\n    } //pass/fail\n    else if (type === 'pass/fail') {\n        topRight = null;\n        middleRight = `Success To Date: ${value} / ${time > duration ? record.length : time + 1} (${round(value / (time + 1) * 100)}%)`;\n        bottomRight = `Success Total: ${value} / ${record.length} (${round(value / record.length * 100)}%)`;\n      }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, topLeft), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, topRight))), React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, middleLeft), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, middleRight))), type !== 'total' && React.createElement(\"li\", {\n    className: \"table-info lr-border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"space-between\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, bottomLeft), React.createElement(\"span\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, bottomRight))));\n};\n\nexport default GoalInfo;","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/src/components/goals/goalPieces/GoalInfo.js"],"names":["React","round","GoalInfo","goal","time","record","value","duration","startDate","units","total","type","topLeft","moment","utc","format","topRight","middleLeft","middleRight","bottomLeft","bottomRight","runningTotal","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { round } from 'mathjs';\n\n\nconst GoalInfo = ({goal, time, record, value}) => {\n\n  const { duration, startDate, units, total, type } = goal;\n\n  let topLeft = `Start Date: ${moment.utc(startDate).format('MMMM Do, YYYY')}`\n  let topRight = null;\n  let middleLeft = null;\n  let middleRight = null;\n  let bottomLeft = null;\n  let bottomRight = null;\n\n  //difference\n  if (type === 'difference') {\n    topRight = (time === duration) ? \n      `Final: ${record[0] + value} ${units}` :\n      `Day: ${time + 1} / ${duration}`;\n    middleLeft = `Start: ${record[0]} ${units}`;\n    middleRight = `Goal: ${total} ${units}`;\n    bottomLeft = (time === duration) ? \n      `Final: ${record[0] + value} ${units}` :\n      `Current: ${record[0] + value}`;\n    bottomRight = `Change: ${value > 0 ? '+' : ''}${value} ${units}`\n  }\n  //total\n  else if (time === duration && type === 'total') {\n    topRight = (time === duration) ? \n      `Duration: ${duration} days` : \n      `Day: ${time + 1} / ${duration}`\n    middleLeft = `Total: ${value} / ${total} ${units}`;\n    middleRight = `Goal Completion: ${round(runningTotal / total * 100)}%`;\n  }\n  //pass/fail\n  else if (type === 'pass/fail') {\n    topRight = null;\n    middleRight = `Success To Date: ${value} / ${time > duration ? record.length : time + 1} (${round(value / (time + 1) * 100)}%)`\n    bottomRight = `Success Total: ${value} / ${record.length} (${round(value / record.length * 100)}%)`\n  }\n  \n  return (\n    <React.Fragment>\n      <li className='table-info lr-border'>\n        <div className='space-between'>\n          <span>\n            {topLeft}\n          </span>\n          <span className='right'>\n            {topRight}\n          </span>\n        </div>\n      </li>\n      <li className='table-info lr-border'>\n        <div className='space-between'>\n          <span>\n            {middleLeft}\n          </span>\n          <span className='right'>\n            {middleRight}\n          </span>\n        </div>\n      </li>\n      {type !== 'total' && \n        <li className='table-info lr-border'>\n          <div className='space-between'>\n            <span>\n              {bottomLeft}\n            </span>\n            <span className='right'>\n              {bottomRight}\n            </span>\n          </div>\n        </li>\n      }\n    </React.Fragment>\n  )\n}\n\nexport default GoalInfo;"]},"metadata":{},"sourceType":"module"}