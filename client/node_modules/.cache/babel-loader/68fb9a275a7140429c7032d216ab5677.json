{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nimport { scatter } from '../../../utils/collection';\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm06 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});","map":{"version":3,"sources":["/home/kevin/Documents/js_html_css/fitness_website/second_start/client/node_modules/mathjs/es/type/matrix/utils/algorithm06.js"],"names":["factory","DimensionError","scatter","name","dependencies","createAlgorithm06","_ref","typed","equalScalar","algorithm06","a","b","callback","avalues","_values","asize","_size","adt","_datatype","bvalues","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","c","createSparseMatrix","values","index","ptr","size","datatype","x","w","u","j","mark","k","i","v","push","splice","p","r"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nimport { scatter } from '../../../utils/collection';\nvar name = 'algorithm06';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm06 =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});"]},"metadata":{},"sourceType":"module"}